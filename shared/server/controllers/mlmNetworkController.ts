import { Request, Response } from 'express';
import { mlmNetworkService, NetworkCalculationOptions } from '../services/mlmNetworkService';
import { mlmNetworkServiceSimple } from '../services/mlmNetworkServiceSimple';
import { z } from 'zod';

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const networkStatsQuerySchema = z.object({
  dateFrom: z.string().datetime().optional(),
  dateTo: z.string().datetime().optional(),
  includeInactive: z.coerce.boolean().default(false),
  maxDepth: z.coerce.number().min(1).max(16).default(16)
});

const userIdParamSchema = z.object({
  userId: z.coerce.number().min(1)
});

export class MLMNetworkController {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserNetworkStats(req: Request, res: Response) {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({
          error: 'Unauthorized',
          message: 'User not authenticated'
        });
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const validationResult = networkStatsQuerySchema.safeParse(req.query);
      if (!validationResult.success) {
        return res.status(400).json({
          error: 'Invalid query parameters',
          details: validationResult.error.errors
        });
      }

      const options: NetworkCalculationOptions = {
        dateFrom: validationResult.data.dateFrom ? new Date(validationResult.data.dateFrom) : undefined,
        dateTo: validationResult.data.dateTo ? new Date(validationResult.data.dateTo) : undefined,
        includeInactive: validationResult.data.includeInactive,
        maxDepth: validationResult.data.maxDepth
      };

      const stats = await mlmNetworkService.getUserNetworkStats(userId, options);

      res.json({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('Error getting user network stats:', error);
      res.status(500).json({
        error: 'Server error',
        message: 'Failed to get network statistics'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
   */
  async getSpecificUserNetworkStats(req: Request, res: Response) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!req.user?.is_admin && !(req as any).admin) {
        return res.status(403).json({
          error: 'Forbidden',
          message: 'Admin access required'
        });
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const paramValidation = userIdParamSchema.safeParse(req.params);
      if (!paramValidation.success) {
        return res.status(400).json({
          error: 'Invalid user ID',
          details: paramValidation.error.errors
        });
      }

      const queryValidation = networkStatsQuerySchema.safeParse(req.query);
      if (!queryValidation.success) {
        return res.status(400).json({
          error: 'Invalid query parameters',
          details: queryValidation.error.errors
        });
      }

      const userId = paramValidation.data.userId;
      const options: NetworkCalculationOptions = {
        dateFrom: queryValidation.data.dateFrom ? new Date(queryValidation.data.dateFrom) : undefined,
        dateTo: queryValidation.data.dateTo ? new Date(queryValidation.data.dateTo) : undefined,
        includeInactive: queryValidation.data.includeInactive,
        maxDepth: queryValidation.data.maxDepth
      };

      const stats = await mlmNetworkService.getUserNetworkStats(userId, options);

      res.json({
        success: true,
        data: stats
      });

    } catch (error) {
      console.error('Error getting specific user network stats:', error);
      res.status(500).json({
        error: 'Server error',
        message: 'Failed to get user network statistics'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω–∫–∞)
   */
  async getAllUsersNetworkStats(req: Request, res: Response) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!req.user?.is_admin && !(req as any).admin) {
        return res.status(403).json({
          error: 'Forbidden',
          message: 'Admin access required'
        });
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const validationResult = networkStatsQuerySchema.safeParse(req.query);
      if (!validationResult.success) {
        return res.status(400).json({
          error: 'Invalid query parameters',
          details: validationResult.error.errors
        });
      }

      const options: NetworkCalculationOptions = {
        dateFrom: validationResult.data.dateFrom ? new Date(validationResult.data.dateFrom) : undefined,
        dateTo: validationResult.data.dateTo ? new Date(validationResult.data.dateTo) : undefined,
        includeInactive: validationResult.data.includeInactive,
        maxDepth: validationResult.data.maxDepth
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞
      const allStats = await mlmNetworkServiceSimple.getAllUsersNetworkStats();

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –æ–±—ä–µ–º—É —Å–µ—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
      const sortedStats = allStats.sort((a, b) => {
        const aTotal = a.personalVolume.totalAmount + a.groupVolume.totalAmount;
        const bTotal = b.personalVolume.totalAmount + b.groupVolume.totalAmount;
        return bTotal - aTotal;
      });

      res.json({
        success: true,
        data: sortedStats,
        summary: {
          totalUsers: sortedStats.length,
          totalPersonalVolume: sortedStats.reduce((sum, user) => sum + user.personalVolume.totalAmount, 0),
          totalGroupVolume: sortedStats.reduce((sum, user) => sum + user.groupVolume.totalAmount, 0),
          totalReferrals: sortedStats.reduce((sum, user) => sum + user.network.totalReferrals, 0),
          totalEarnings: sortedStats.reduce((sum, user) => sum + user.earnings.totalEarned, 0)
        }
      });

    } catch (error) {
      console.error('Error getting all users network stats:', error);
      res.status(500).json({
        error: 'Server error',
        message: 'Failed to get network statistics for all users'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserNetworkTree(req: Request, res: Response) {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({
          error: 'Unauthorized',
          message: 'User not authenticated'
        });
      }

      const maxDepth = parseInt(req.query.maxDepth as string) || 3;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
      const referrals = await mlmNetworkService.getAllNetworkReferrals(userId, maxDepth);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const tree = this.buildNetworkTree(referrals);

      res.json({
        success: true,
        data: {
          rootUserId: userId,
          maxDepth,
          totalReferrals: referrals.length,
          tree
        }
      });

    } catch (error) {
      console.error('Error getting user network tree:', error);
      res.status(500).json({
        error: 'Server error',
        message: 'Failed to get network tree'
      });
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Å–µ—Ç–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
   */
  private buildNetworkTree(referrals: Array<{userId: number, level: number, referrerId: number}>) {
    const tree: Record<number, Array<{userId: number, level: number, children: any[]}>> = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    referrals.forEach(ref => {
      if (!tree[ref.level]) {
        tree[ref.level] = [];
      }
      tree[ref.level].push({
        userId: ref.userId,
        level: ref.level,
        children: []
      });
    });

    return tree;
  }

  /**
   * –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  async recalculateAllNetworkStats(req: Request, res: Response) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!req.user?.is_admin && !(req as any).admin) {
        return res.status(403).json({
          error: 'Forbidden',
          message: 'Admin access required'
        });
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –≤ —Ñ–æ–Ω–µ
      setTimeout(async () => {
        try {
          console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Å—á–µ—Ç MLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
          const allStats = await mlmNetworkService.getAllUsersNetworkStats();
          console.log(`‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${allStats.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ MLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
      }, 1000);

      res.json({
        success: true,
        message: 'Network statistics recalculation started in background'
      });

    } catch (error) {
      console.error('Error starting network stats recalculation:', error);
      res.status(500).json({
        error: 'Server error',
        message: 'Failed to start recalculation'
      });
    }
  }
}

export const mlmNetworkController = new MLMNetworkController();