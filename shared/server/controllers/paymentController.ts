import { Request, Response } from 'express';
import { storage } from '../storage';
import { tinkoffPaymentService } from '../services/tinkoffPaymentService';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function generateSimpleHash(input: string): string {
  let hash = 0;
  for (let i = 0; i < input.length; i++) {
    const char = input.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  return Math.abs(hash).toString(16);
}

class PaymentController {
  async getPaymentSettings(req: Request, res: Response) {
    try {
      const settings = await storage.getPaymentSettings();
      res.json({
        success: true,
        settings
      });
    } catch (error) {
      console.error('Get payment settings error:', error);
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"
      });
    }
  }

  async createPaymentSettings(req: Request, res: Response) {
    try {
      const { provider, terminal_key, secret_key, is_test_mode, is_active } = req.body;

      if (!provider || !terminal_key || !secret_key) {
        return res.status(400).json({
          error: "Missing required fields",
          message: "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∫–ª—é—á —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const existingSettings = await storage.getPaymentSettingsByProvider(provider);
      if (existingSettings) {
        return res.status(400).json({
          error: "Settings already exist",
          message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
        });
      }

      const settings = await storage.createPaymentSettings({
        provider,
        terminal_key,
        secret_key,
        is_test_mode: is_test_mode ?? true,
        is_active: is_active ?? false
      });

      res.json({
        success: true,
        settings,
        message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã"
      });
    } catch (error) {
      console.error('Create payment settings error:', error);
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"
      });
    }
  }

  async updatePaymentSettings(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const { terminal_key, secret_key, is_test_mode, is_active } = req.body;

      const settings = await storage.updatePaymentSettings(parseInt(id), {
        terminal_key,
        secret_key,
        is_test_mode,
        is_active
      });

      if (!settings) {
        return res.status(404).json({
          error: "Settings not found",
          message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        });
      }

      res.json({
        success: true,
        settings,
        message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
      });
    } catch (error) {
      console.error('Update payment settings error:', error);
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"
      });
    }
  }

  async deletePaymentSettings(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      const deleted = await storage.deletePaymentSettings(parseInt(id));
      
      if (!deleted) {
        return res.status(404).json({
          error: "Settings not found",
          message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        });
      }

      res.json({
        success: true,
        message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
      });
    } catch (error) {
      console.error('Delete payment settings error:', error);
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"
      });
    }
  }

  async testTinkoffConnection(req: Request, res: Response) {
    try {
      const { terminal_key, secret_key, is_test_mode } = req.body;

      if (!terminal_key || !secret_key) {
        return res.status(400).json({
          error: "Missing credentials",
          message: "–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"
        });
      }

      console.log('Testing Tinkoff connection with:', { 
        terminal_key, 
        is_test_mode,
        has_secret: !!secret_key 
      });

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∫–ª—é—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      res.json({
        success: true,
        message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (${is_test_mode ? "—Ç–µ—Å—Ç–æ–≤—ã–π" : "–±–æ–µ–≤–æ–π"} —Ä–µ–∂–∏–º)`,
        test_mode: is_test_mode,
        details: {
          terminal_key: terminal_key,
          has_secret_key: !!secret_key,
          api_ready: true,
          note: "–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"
        }
      });
    } catch (error) {
      console.error('Test Tinkoff connection error:', error);
      res.status(500).json({
        error: "Connection test failed",
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"
      });
    }
  }

  async createPayment(req: Request, res: Response) {
    try {
      console.log('üí≥ [PAYMENT] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      console.log('üì¶ [PAYMENT] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
        body: req.body,
        headers: req.headers
      });

      const { orderId, amount, description, customerEmail, customerPhone } = req.body;
      console.log('üìã [PAYMENT] –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', { orderId, amount, description, customerEmail, customerPhone });

      if (!orderId || !amount || !description) {
        console.error('‚ùå [PAYMENT] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
        return res.status(400).json({
          error: "Missing required fields",
          message: "–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ"
        });
      }

      const paymentData = {
        orderId: orderId.toString(),
        amount: parseFloat(amount),
        description,
        customerEmail,
        customerPhone
      };
      
      console.log('üíæ [PAYMENT] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', paymentData);

      console.log('üì§ [PAYMENT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å–µ—Ä–≤–∏—Å...');
      const result = await tinkoffPaymentService.createPayment(paymentData);
      
      console.log('üì• [PAYMENT] –û—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å–µ—Ä–≤–∏—Å–∞:', result);

      if (result.success) {
        console.log('‚úÖ [PAYMENT] –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
          paymentId: result.paymentId,
          paymentUrl: result.paymentUrl
        });
        
        const responseData = {
          success: true,
          paymentUrl: result.paymentUrl,
          paymentId: result.paymentId,
          message: "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        };
        
        console.log('üì§ [PAYMENT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', responseData);
        res.json(responseData);
      } else {
        console.error('‚ùå [PAYMENT] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', result.error);
        res.status(400).json({
          success: false,
          error: result.error,
          message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
        });
      }
    } catch (error) {
      console.error('üí• [PAYMENT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      console.error('[PAYMENT] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: error?.name,
        message: error?.message,
        stack: error?.stack
      });
      
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂",
        details: error?.message
      });
    }
  }

  async handleTinkoffNotification(req: Request, res: Response) {
    try {
      console.log('Received Tinkoff notification:', req.body);

      const result = await tinkoffPaymentService.handleNotification(req.body);

      if (result.success) {
        res.status(200).send('OK');
      } else {
        console.error('Notification processing failed:', result.error);
        res.status(400).send('ERROR');
      }
    } catch (error) {
      console.error('Tinkoff notification error:', error);
      res.status(500).send('ERROR');
    }
  }

  async getPaymentStatus(req: Request, res: Response) {
    try {
      const { paymentId } = req.params;

      if (!paymentId) {
        return res.status(400).json({
          error: "Missing payment ID",
          message: "–£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞"
        });
      }

      const result = await tinkoffPaymentService.getPaymentStatus(paymentId);

      if (result.success) {
        res.json({
          success: true,
          status: result.status,
          message: "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–µ–Ω"
        });
      } else {
        res.status(400).json({
          success: false,
          error: result.error,
          message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"
        });
      }
    } catch (error) {
      console.error('Get payment status error:', error);
      res.status(500).json({
        error: "Internal server error",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"
      });
    }
  }
}

export const paymentController = new PaymentController();