import { Request, Response } from 'express';
import { storage } from '../storage';
import { generateJWT } from '../middleware/auth';
import { User } from '../../shared/schema';

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: {
    id: number;
    type: string;
  };
  date: number;
  text?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: {
    id: string;
    from: TelegramUser;
    message?: TelegramMessage;
    data?: string;
  };
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        reply_markup: replyMarkup,
        parse_mode: 'HTML'
      })
    });
    
    const result = await response.json();
    if (!result.ok) {
      console.error('Telegram API error:', result);
    }
    return result;
  } catch (error) {
    console.error('Error sending telegram message:', error);
    return { ok: false, error };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createKeyboard(user: any) {
  const encodedFirstName = encodeURIComponent(user.first_name || '');
  const username = user.username ? encodeURIComponent(user.username) : '';
  const telegramId = user.telegram_id || user.id;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º production –¥–æ–º–µ–Ω
  const baseUrl = 'https://vitawins.ru';
  
  return {
    inline_keyboard: [
      [
        {
          text: "üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
          url: `${baseUrl}?tg_id=${telegramId}&first_name=${encodedFirstName}&username=${username}`
        }
      ],
      [
        {
          text: "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
          url: `${baseUrl}/account?tg_id=${telegramId}&first_name=${encodedFirstName}&username=${username}`
        },
        {
          text: "üìä –†–µ—Ñ–µ—Ä–∞–ª—ã",
          url: `${baseUrl}/account?tg_id=${telegramId}&first_name=${encodedFirstName}&username=${username}#referrals`
        }
      ],
      [
        {
          text: "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
          callback_data: "support"
        },
        {
          text: "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏",
          callback_data: "about"
        }
      ]
    ]
  };
}

class TelegramController {
  // Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
  async webhook(req: Request, res: Response) {
    try {
      console.log('Telegram webhook received:', JSON.stringify(req.body, null, 2));
      
      const update: TelegramUpdate = req.body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
      if (update.callback_query) {
        const callbackQuery = update.callback_query;
        const user = callbackQuery.from;
        const data = callbackQuery.data;
        const chatId = callbackQuery.message?.chat.id;

        if (!chatId) {
          res.status(200).json({ ok: true });
          return;
        }

        console.log(`Processing callback query from user ${user.id}: ${data}`);

        switch (data) {
          case 'support':
            await sendTelegramMessage(chatId, `ü§ù –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:
üë®‚Äçüíº @vitawin_support_bot

–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é:
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: support@vitawins.ru
üí¨ Telegram: @vitawin_manager

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–ù-–ü–¢ 9:00-18:00 (–ú–°–ö)`);
            break;

          case 'about':
            await sendTelegramMessage(chatId, `‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏ VitaWin:

üè¢ VitaWin - –≤–µ–¥—É—â–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –ë–ê–î–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è.

üåü –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è GMP
‚Ä¢ –ù–∞—É—á–Ω–∞—è –±–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫

üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ 20% —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ 5% —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
‚Ä¢ 1% —Å —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è

üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!`);
            break;

          default:
            await sendTelegramMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }

        res.status(200).json({ ok: true });
        return;
      }
      
      if (!update.message || !update.message.text) {
        console.log('No message or text in update, skipping');
        res.status(200).json({ ok: true });
        return;
      }

      const message = update.message;
      const user = message.from;
      const text = message.text?.trim();

      if (!user) {
        console.log('No user data in message, skipping');
        res.status(200).json({ ok: true });
        return;
      }

      console.log(`Processing message from user ${user.id}: ${text}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
      if (text && (text === '/start' || text.startsWith('/start '))) {
        console.log('Handling /start command');
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          let existingUser = await storage.getUserByTelegramId(user.id);
          console.log('Existing user check result:', existingUser ? 'found' : 'not found');
          
          if (!existingUser) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID
            const referralCode = user.id.toString();
            
            console.log('Creating new user with data:', {
              telegram_id: user.id,
              first_name: user.first_name,
              referral_code: referralCode
            });
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = await storage.createUser({
              telegram_id: user.id,
              first_name: user.first_name,
              username: user.username || null,
              referral_code: referralCode
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VitaWin, ${user.first_name}!

üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${referralCode}</code>

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å –∏—Ö –ø–æ–∫—É–ø–æ–∫!

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:`;

            const keyboard = createKeyboard(user);
            await sendTelegramMessage(message.chat.id, welcomeMessage, keyboard);
            
            console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${newUser.first_name} (ID: ${newUser.telegram_id})`);
          } else {
            console.log('Sending message to existing user');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const existingMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${existingUser.first_name}!

üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${existingUser.referral_code || user.id.toString()}</code>

üì± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω:`;

            const keyboard = createKeyboard(existingUser);
            await sendTelegramMessage(message.chat.id, existingMessage, keyboard);
            
            console.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${existingUser.first_name} (ID: ${existingUser.telegram_id})`);
          }
        } catch (error) {
          console.error('Error handling start command:', error);
          await sendTelegramMessage(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
      if (text === '/menu') {
        console.log('Handling /menu command');
        
        try {
          let existingUser = await storage.getUserByTelegramId(user.id);
          
          if (!existingUser) {
            await sendTelegramMessage(message.chat.id, '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
            return;
          }

          const menuMessage = `üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VitaWin:

üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${existingUser.referral_code || user.id.toString()}</code>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:`;

          const keyboard = createKeyboard(existingUser);
          await sendTelegramMessage(message.chat.id, menuMessage, keyboard);
          
        } catch (error) {
          console.error('Error handling menu command:', error);
          await sendTelegramMessage(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      }
      
      console.log('Webhook processed successfully');
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Error processing webhook:', error);
      res.status(500).json({ ok: false, error: 'Internal server error' });
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async telegramAuth(req: Request, res: Response) {
    try {
      const { telegram_id } = req.body;
      
      if (!telegram_id) {
        return res.status(400).json({ 
          success: false, 
          error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
      }

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegram_id);
      
      if (!user) {
        return res.status(404).json({ 
          success: false, 
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É @vitawin_bot' 
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = generateJWT({ 
        userId: user.id,
        telegramId: user.telegram_id 
      });

      res.json({ 
        success: true, 
        token,
        user: {
          id: user.id,
          telegram_id: user.telegram_id,
          first_name: user.first_name,
          username: user.username,
          referral_code: user.referral_code
        }
      });
    } catch (error) {
      console.error('Error in telegram auth:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
  async setWebhook(req: Request, res: Response) {
    try {
      const REPLIT_DOMAIN = process.env.REPLIT_DOMAINS || '15b86ffd-8123-4786-9a33-4c6dce6c1a67-00-11b7k921y9q0c.picard.replit.dev';
      const webhookUrl = `https://${REPLIT_DOMAIN}/api/telegram/webhook`;
      
      console.log('Setting webhook URL:', webhookUrl);
      console.log('Bot token exists:', !!process.env.TELEGRAM_BOT_TOKEN);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfoResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`);
      const botInfo = await botInfoResponse.json();
      console.log('Bot info response:', botInfo);

      if (!botInfo.ok) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'
        });
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['message', 'callback_query']
        })
      });

      const result = await response.json();
      console.log('Telegram API response:', result);

      if (result.ok) {
        res.json({
          success: true,
          message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          webhook_url: webhookUrl,
          bot_info: botInfo.result
        });
      } else {
        res.status(400).json({
          success: false,
          error: result.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook'
        });
      }
    } catch (error) {
      console.error('Error setting webhook:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ webhook
  async deleteWebhook(req: Request, res: Response) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/deleteWebhook`, {
        method: 'POST'
      });

      const result = await response.json();

      if (result.ok) {
        res.json({
          success: true,
          message: 'Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });
      } else {
        res.status(400).json({
          success: false,
          error: result.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook'
        });
      }
    } catch (error) {
      console.error('Error deleting webhook:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
  async getWebhookInfo(req: Request, res: Response) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
      const result = await response.json();

      if (result.ok) {
        res.json(result);
      } else {
        res.status(400).json({
          success: false,
          error: result.description || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'
        });
      }
    } catch (error) {
      console.error('Error getting webhook info:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
  async setupBot(req: Request, res: Response) {
    try {
      res.json({
        success: true,
        message: '–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    } catch (error) {
      console.error('Error setting up bot:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  // –ó–∞–ø—É—Å–∫ polling
  async startPolling(req: Request, res: Response) {
    try {
      res.json({
        success: true,
        message: 'Polling –∑–∞–ø—É—â–µ–Ω'
      });
    } catch (error) {
      console.error('Error starting polling:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
}

export const telegramController = new TelegramController();