import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { AlertCircle, Save, Lock } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

interface BonusPreferencesData {
  id: number;
  user_id: number;
  health_id_percentage: number;
  travel_percentage: number;
  home_percentage: number;
  auto_percentage: number;
  is_locked: boolean;
  created_at: string;
  updated_at: string;
}

const BonusPreferences: React.FC = () => {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    health_id_percentage: 25,
    travel_percentage: 25,
    home_percentage: 25,
    auto_percentage: 25
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const { data: preferences, isLoading, error } = useQuery({
    queryKey: ['/api/user/bonus-preferences'],
    queryFn: async () => {
      const response = await apiRequest('GET', '/api/user/bonus-preferences');
      return response.json();
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (preferences?.data) {
      const prefs = preferences.data;
      setFormData({
        health_id_percentage: prefs.health_id_percentage,
        travel_percentage: prefs.travel_percentage,
        home_percentage: prefs.home_percentage,
        auto_percentage: prefs.auto_percentage
      });
    }
  }, [preferences]);

  // Mutation –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveMutation = useMutation({
    mutationFn: async (data: typeof formData) => {
      const response = await apiRequest('PUT', '/api/user/bonus-preferences', data);
      if (!response.ok) {
        throw new Error('Failed to save preferences');
      }
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/user/bonus-preferences'] });
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        variant: "destructive"
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
  const handleChange = (field: keyof typeof formData, value: string) => {
    const numValue = parseInt(value) || 0;
    setFormData(prev => ({
      ...prev,
      [field]: Math.max(0, Math.min(100, numValue))
    }));
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—É–º–º—ã 100%
  const handleBlur = () => {
    const total = Object.values(formData).reduce((sum, val) => sum + val, 0);
    if (total !== 100) {
      // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
      const diff = 100 - total;
      const perField = Math.floor(diff / 4);
      const remainder = diff % 4;
      
      setFormData(prev => ({
        health_id_percentage: prev.health_id_percentage + perField + (remainder > 0 ? 1 : 0),
        travel_percentage: prev.travel_percentage + perField + (remainder > 1 ? 1 : 0),
        home_percentage: prev.home_percentage + perField + (remainder > 2 ? 1 : 0),
        auto_percentage: prev.auto_percentage + perField
      }));
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã
  const totalPercentage = Object.values(formData).reduce((sum, val) => sum + val, 0);
  const isValidTotal = totalPercentage === 100;
  const isLocked = preferences?.data?.is_locked || false;

  const handleSave = () => {
    if (!isValidTotal) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–°—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è 100%",
        variant: "destructive"
      });
      return;
    }
    saveMutation.mutate(formData);
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="pt-6">
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–æ–≤
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>–°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞</span>
          {isLocked && (
            <Badge variant="secondary" className="ml-2">
              <Lock className="h-3 w-3 mr-1" />
              –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            </Badge>
          )}
        </CardTitle>
        <p className="text-sm text-gray-600">
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. 
          –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 100%.
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–Ω—É—Å–æ–≤ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="health_id" className="flex items-center gap-2">
              üè• Health ID
            </Label>
            <div className="flex items-center space-x-2 mt-1">
              <Input
                id="health_id"
                type="number"
                min="0"
                max="100"
                value={formData.health_id_percentage}
                onChange={(e) => handleChange('health_id_percentage', e.target.value)}
                onBlur={handleBlur}
                disabled={isLocked}
                className="w-20"
              />
              <span className="text-sm text-gray-500">%</span>
            </div>
          </div>

          <div>
            <Label htmlFor="travel" className="flex items-center gap-2">
              ‚úàÔ∏è –ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
            </Label>
            <div className="flex items-center space-x-2 mt-1">
              <Input
                id="travel"
                type="number"
                min="0"
                max="100"
                value={formData.travel_percentage}
                onChange={(e) => handleChange('travel_percentage', e.target.value)}
                onBlur={handleBlur}
                disabled={isLocked}
                className="w-20"
              />
              <span className="text-sm text-gray-500">%</span>
            </div>
          </div>

          <div>
            <Label htmlFor="home" className="flex items-center gap-2">
              üè† –ú–æ–π –¥–æ–º
            </Label>
            <div className="flex items-center space-x-2 mt-1">
              <Input
                id="home"
                type="number"
                min="0"
                max="100"
                value={formData.home_percentage}
                onChange={(e) => handleChange('home_percentage', e.target.value)}
                onBlur={handleBlur}
                disabled={isLocked}
                className="w-20"
              />
              <span className="text-sm text-gray-500">%</span>
            </div>
          </div>

          <div>
            <Label htmlFor="auto" className="flex items-center gap-2">
              üöó –ê–≤—Ç–æ
            </Label>
            <div className="flex items-center space-x-2 mt-1">
              <Input
                id="auto"
                type="number"
                min="0"
                max="100"
                value={formData.auto_percentage}
                onChange={(e) => handleChange('auto_percentage', e.target.value)}
                onBlur={handleBlur}
                disabled={isLocked}
                className="w-20"
              />
              <span className="text-sm text-gray-500">%</span>
            </div>
          </div>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—É–º–º—ã */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="flex justify-between items-center">
            <span className="font-medium">–û–±—â–∞—è —Å—É–º–º–∞:</span>
            <span className={`font-bold text-lg ${
              totalPercentage === 100 ? 'text-green-600' : 'text-red-600'
            }`}>
              {totalPercentage}%
            </span>
          </div>
          {totalPercentage !== 100 && (
            <Alert className="mt-2" variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 100%. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {totalPercentage}%
              </AlertDescription>
            </Alert>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        {!isLocked && (
          <Button 
            onClick={handleSave}
            disabled={!isValidTotal || saveMutation.isPending}
            className="w-full"
          >
            <Save className="h-4 w-4 mr-2" />
            {saveMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </Button>
        )}

        {isLocked && (
          <Alert>
            <Lock className="h-4 w-4" />
            <AlertDescription>
              –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã.
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
};

export default BonusPreferences;