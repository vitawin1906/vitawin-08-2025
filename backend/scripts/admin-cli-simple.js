#!/usr/bin/env node

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ö–æ—Å—Ç–µ (–Ω–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function runSQL(query) {
  try {
    const { stdout } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "${query}"`
    );
    return stdout;
  } catch (error) {
    throw new Error(`SQL Error: ${error.message}`);
  }
}

async function checkAdmins() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const basicData = await runSQL(
      'SELECT id, email, created_at, last_login FROM admin_users ORDER BY id;'
    );
    console.log('üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–≤:');
    console.log(basicData);

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª–∏ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    const passwordData = await runSQL(
      'SELECT id, email, password_hash FROM admin_users ORDER BY id;'
    );
    console.log('üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:');
    console.log(passwordData);

    console.log('\nüìù –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:');
    console.log('admin@vitawins.ru: VitawinAdmin2025!');
    console.log('dorosh21@gmail.com: admin123 (–ù–ï –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!)');
    
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–∞—Ä–æ–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ plain text!');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö –¥–æ bcrypt —Ö–µ—à–µ–π.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

async function showMenu() {
  console.log('\nüîß VitaWin Admin CLI (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
  console.log('==========================================\n');
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
  console.log('2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤');
  console.log('3. –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ PostgreSQL');
  console.log('4. –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –¥–æ bcrypt');
  console.log('0. –í—ã—Ö–æ–¥\n');
}

async function showContainerStatus() {
  try {
    const { stdout } = await execAsync('docker ps --filter "name=vitawin" --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"');
    console.log('\nüê≥ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ VitaWin:');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
  }
}

async function showLogs() {
  try {
    const { stdout } = await execAsync('docker logs --tail 20 vitawin_postgres');
    console.log('\nüìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ PostgreSQL:');
    console.log(stdout);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
  }
}

async function updatePasswords() {
  console.log('\nüîê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –¥–æ bcrypt —Ö–µ—à–µ–π...\n');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º bcrypt —Ö–µ—à–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É Docker
    console.log('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è bcrypt —Ö–µ—à–µ–π...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Node.js –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–µ–π
    const { stdout: adminHashResult } = await execAsync(
      `docker exec vitawin_app node -e "const bcrypt = require('bcrypt'); bcrypt.hash('VitawinAdmin2025!', 12).then(h => console.log(h))"`
    );
    const adminHash = adminHashResult.trim();
    
    const { stdout: doroshHashResult } = await execAsync(
      `docker exec vitawin_app node -e "const bcrypt = require('bcrypt'); bcrypt.hash('admin123', 12).then(h => console.log(h))"`
    );
    const doroshHash = doroshHashResult.trim();
    
    console.log(`admin@vitawins.ru: ${adminHash.substring(0, 30)}...`);
    console.log(`dorosh21@gmail.com: ${doroshHash.substring(0, 30)}...`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await runSQL(`UPDATE admin_users SET password_hash = '${adminHash}' WHERE email = 'admin@vitawins.ru';`);
    await runSQL(`UPDATE admin_users SET password_hash = '${doroshHash}' WHERE email = 'dorosh21@gmail.com';`);
    
    console.log('\n‚úÖ –ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ bcrypt —Ö–µ—à–µ–π!');
    console.log('\nüìù –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω–∫–µ –º–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å:');
    console.log('admin@vitawins.ru: VitawinAdmin2025!');
    console.log('dorosh21@gmail.com: admin123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:', error.message);
    console.log('\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.length > 0) {
  switch (args[0]) {
    case 'check':
      await checkAdmins();
      process.exit(0);
    case 'status':
      await showContainerStatus();
      process.exit(0);
    case 'logs':
      await showLogs();
      process.exit(0);
    case 'update-passwords':
      await updatePasswords();
      process.exit(0);
    default:
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: check, status, logs, update-passwords');
      process.exit(1);
  }
}

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
async function main() {
  const readline = (await import('readline')).default;
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const question = (prompt) => new Promise(resolve => rl.question(prompt, resolve));

  while (true) {
    await showMenu();
    const choice = await question('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ');

    switch (choice) {
      case '1':
        await checkAdmins();
        break;
      case '2':
        await showContainerStatus();
        break;
      case '3':
        await showLogs();
        break;
      case '4':
        await updatePasswords();
        break;
      case '0':
        console.log('\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
        rl.close();
        return;
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
    }

    await question('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default main;