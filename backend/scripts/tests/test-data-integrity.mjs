#!/usr/bin/env node

import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import { sql } from "drizzle-orm";

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL environment variable is required');
  process.exit(1);
}

const client = neon(connectionString);
const db = drizzle(client);

async function testDataIntegrity() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ú–æ—è —Å–µ—Ç—å" - —Ç–∞–±–ª–∏—Ü–∞ users
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ú–æ—è —Å–µ—Ç—å" (users)');
    const usersResult = await db.execute(sql`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN applied_referral_code IS NOT NULL THEN 1 END) as users_with_referrals,
        COUNT(CASE WHEN referrer_id IS NOT NULL THEN 1 END) as users_with_referrer_id
      FROM users
    `);
    
    const usersData = usersResult.rows?.[0] || usersResult[0];
    console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersData.total_users}`);
    console.log(`   ‚úÖ –° —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏: ${usersData.users_with_referrals}`);
    console.log(`   ‚úÖ –° referrer_id: ${usersData.users_with_referrer_id}`);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ "MLM –£—Ä–æ–≤–Ω–∏" - —Ç–∞–±–ª–∏—Ü–∞ mlm_levels
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ "MLM –£—Ä–æ–≤–Ω–∏" (mlm_levels)');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const mlmFieldsCheck = await db.execute(sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'mlm_levels' 
      AND column_name IN ('required_personal_volume', 'required_group_volume')
    `);
    
    if (mlmFieldsCheck.length < 2) {
      console.log('   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä–µ–º–æ–≤!');
      console.log('   üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: node migrate-mlm-volume-fields.mjs');
      return false;
    }
    
    const mlmLevelsResult = await db.execute(sql`
      SELECT 
        COUNT(*) as total_levels,
        COUNT(CASE WHEN required_personal_volume > 0 THEN 1 END) as levels_with_personal_volume,
        COUNT(CASE WHEN required_group_volume > 0 THEN 1 END) as levels_with_group_volume
      FROM mlm_levels
    `);
    
    const mlmData = mlmLevelsResult.rows?.[0] || mlmLevelsResult[0];
    console.log(`   ‚úÖ –í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: ${mlmData.total_levels}`);
    console.log(`   ‚úÖ –° –ª–∏—á–Ω—ã–º –æ–±—ä–µ–º–æ–º: ${mlmData.levels_with_personal_volume}`);
    console.log(`   ‚úÖ –° –≥—Ä—É–ø–ø–æ–≤—ã–º –æ–±—ä–µ–º–æ–º: ${mlmData.levels_with_group_volume}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã—Ö 3 —É—Ä–æ–≤–Ω–µ–π
    const mlmSampleResult = await db.execute(sql`
      SELECT level, name, required_personal_volume, required_group_volume
      FROM mlm_levels
      ORDER BY level
      LIMIT 3
    `);
    
    console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
    mlmSampleResult.forEach(level => {
      console.log(`      –£—Ä–æ–≤–µ–Ω—å ${level.level}: LO=${level.required_personal_volume}, GO=${level.required_group_volume}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞" - —Ç–∞–±–ª–∏—Ü–∞ user_bonus_preferences
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞" (user_bonus_preferences)');
    
    const preferencesResult = await db.execute(sql`
      SELECT 
        COUNT(*) as total_preferences,
        COUNT(CASE WHEN is_locked = true THEN 1 END) as locked_preferences,
        AVG(health_id_percentage + travel_percentage + home_percentage + auto_percentage) as avg_total_percentage
      FROM user_bonus_preferences
    `);
    
    const preferencesData = preferencesResult[0];
    console.log(`   ‚úÖ –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${preferencesData.total_preferences}`);
    console.log(`   ‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${preferencesData.locked_preferences}`);
    console.log(`   ‚úÖ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ %: ${Math.round(preferencesData.avg_total_percentage)}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const invalidPercentages = await db.execute(sql`
      SELECT user_id, (health_id_percentage + travel_percentage + home_percentage + auto_percentage) as total_percentage
      FROM user_bonus_preferences
      WHERE (health_id_percentage + travel_percentage + home_percentage + auto_percentage) != 100
    `);
    
    if (invalidPercentages.length > 0) {
      console.log(`   ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —É ${invalidPercentages.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      invalidPercentages.forEach(pref => {
        console.log(`      User ${pref.user_id}: ${pref.total_percentage}%`);
      });
    } else {
      console.log('   ‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (—Å—É–º–º–∞ = 100%)');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    console.log('\nüìä 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏');
    
    const connectionsResult = await db.execute(sql`
      SELECT 
        u.id as user_id,
        u.first_name,
        (CASE WHEN ubp.user_id IS NOT NULL THEN 1 ELSE 0 END) as has_preferences,
        (CASE WHEN o.user_id IS NOT NULL THEN 1 ELSE 0 END) as has_orders
      FROM users u
      LEFT JOIN user_bonus_preferences ubp ON u.id = ubp.user_id
      LEFT JOIN orders o ON u.id = o.user_id
      ORDER BY u.id
    `);
    
    const usersWithPreferences = connectionsResult.filter(u => u.has_preferences).length;
    const usersWithOrders = connectionsResult.filter(u => u.has_orders).length;
    
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: ${usersWithPreferences}/${connectionsResult.length}`);
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏: ${usersWithOrders}/${connectionsResult.length}`);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–π–Ω—Ç–æ–≤
    console.log('\nüìä 5. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');
    
    const allChecks = [
      usersData.total_users > 0,
      mlmData.total_levels === 16,
      mlmFieldsCheck.length === 2,
      preferencesData.total_preferences > 0,
      invalidPercentages.length === 0
    ];
    
    const passedChecks = allChecks.filter(check => check).length;
    console.log(`   üìà –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passedChecks}/${allChecks.length}`);
    
    if (passedChecks === allChecks.length) {
      console.log('\nüéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏');
      return false;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
testDataIntegrity()
  .then((success) => {
    if (success) {
      console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    } else {
      console.log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });