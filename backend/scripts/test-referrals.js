// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
import axios from 'axios';

const BASE_URL = 'http://localhost:5000/api';

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–æ–π
async function setupTestUsers() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const users = [
    {
      telegram_id: 1001,
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 (–£—Ä–æ–≤–µ–Ω—å 0)',
      username: 'user1',
      referral_code: '1001', // Telegram ID –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      balance: '10000.00'
    },
    {
      telegram_id: 1002,
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 (–£—Ä–æ–≤–µ–Ω—å 1)',
      username: 'user2',
      referral_code: '1002',
      referrer_id: null, // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      balance: '10000.00'
    },
    {
      telegram_id: 1003,
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 (–£—Ä–æ–≤–µ–Ω—å 2)',
      username: 'user3', 
      referral_code: '1003',
      referrer_id: null, // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      balance: '10000.00'
    },
    {
      telegram_id: 1004,
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4 (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å)',
      username: 'user4',
      referral_code: '1004',
      referrer_id: null, // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      balance: '10000.00'
    }
  ];

  const createdUsers = [];

  for (let i = 0; i < users.length; i++) {
    const user = users[i];
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await axios.post(`${BASE_URL}/test/create-user`, user);
      createdUsers.push(response.data.user);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} (ID: ${response.data.user.id})`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (–∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)
      if (i > 0) {
        const referrerId = createdUsers[i - 1].id;
        await axios.patch(`${BASE_URL}/test/update-user/${response.data.user.id}`, {
          referrer_id: referrerId
        });
        console.log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} —Ç–µ–ø–µ—Ä—å —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${createdUsers[i - 1].first_name}`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.first_name}:`, error.response?.data || error.message);
    }
  }

  return createdUsers;
}

// –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
async function testReferralPurchase(buyerId, referralCode) {
  console.log(`\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${buyerId} —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: ${referralCode}`);
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const orderData = {
      items: [
        {
          product_id: 1, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä —Å ID 1
          quantity: 2
        }
      ],
      payment_method: 'balance',
      delivery_address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
      delivery_option: 'pickup',
      referral_code: referralCode
    };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const response = await axios.post(`${BASE_URL}/test/create-order`, {
      user_id: buyerId,
      ...orderData
    });

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:`, {
      order_id: response.data.order.id,
      total: response.data.order.total,
      referral_code_used: response.data.order.referral_code_used
    });

    return response.data.order;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.response?.data || error.message);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
async function checkReferralCommissions() {
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π...');
  
  try {
    const response = await axios.get(`${BASE_URL}/test/referrals`);
    const referrals = response.data.referrals;
    
    console.log(`\nüìà –ù–∞–π–¥–µ–Ω–æ ${referrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:`);
    
    referrals.forEach(referral => {
      console.log(`
üî∏ –†–µ—Ñ–µ—Ä–∞–ª ID: ${referral.id}
   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ID ${referral.user_id}
   –†–µ—Ñ–µ—Ä–µ—Ä: ID ${referral.referrer_id}
   –£—Ä–æ–≤–µ–Ω—å: ${referral.referral_level}
   –ö–æ–º–∏—Å—Å–∏—è: ${referral.commission_rate}%
   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referral.reward_earned} ‚ÇΩ
   –ó–∞–∫–∞–∑: #${referral.order_id}
   –î–∞—Ç–∞: ${new Date(referral.created_at).toLocaleString()}
      `);
    });

    return referrals;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.response?.data || error.message);
    return [];
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUserStats(userIds) {
  console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  for (const userId of userIds) {
    try {
      const response = await axios.get(`${BASE_URL}/test/user-stats/${userId}`);
      const stats = response.data.stats;
      
      console.log(`
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
   –ò–º—è: ${stats.user.first_name}
   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${stats.user.referral_code}
   –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referrals}
   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.total_earnings} ‚ÇΩ
   –ë–∞–ª–∞–Ω—Å: ${stats.user.balance} ‚ÇΩ
      `);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.response?.data || error.message);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runReferralTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await setupTestUsers();
    
    if (users.length < 4) {
      console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // 2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const buyer = users[3]; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4
    const referralCode = users[2].referral_code; // –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 3
    
    const order = await testReferralPurchase(buyer.id, referralCode);
    
    if (!order) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑');
      return;
    }

    // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    const referrals = await checkReferralCommissions();

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await checkUserStats(users.map(u => u.id));

    // 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    
    const expectedCommissions = [
      { level: 1, rate: 20, referrer_id: users[2].id }, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 -> 20%
      { level: 2, rate: 5, referrer_id: users[1].id },  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 -> 5%
      { level: 3, rate: 1, referrer_id: users[0].id }   // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 -> 1%
    ];

    expectedCommissions.forEach(expected => {
      const actual = referrals.find(r => 
        r.referrer_id === expected.referrer_id && 
        r.referral_level === expected.level
      );
      
      if (actual) {
        console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${expected.level}: –ö–æ–º–∏—Å—Å–∏—è ${expected.rate}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${expected.referrer_id} - –ö–û–†–†–ï–ö–¢–ù–û`);
      } else {
        console.log(`‚ùå –£—Ä–æ–≤–µ–Ω—å ${expected.level}: –ö–æ–º–∏—Å—Å–∏—è ${expected.rate}% –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${expected.referrer_id} - –ù–ï –ù–ê–ô–î–ï–ù–ê`);
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runReferralTest().then(() => {
    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
}

module.exports = {
  setupTestUsers,
  testReferralPurchase,
  checkReferralCommissions,
  checkUserStats,
  runReferralTest
};