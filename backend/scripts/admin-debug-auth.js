#!/usr/bin/env node

// –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–æ–≤
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function debugAuth() {
  console.log('\nüîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ê–î–ú–ò–ù–û–í\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã admin_users
    console.log('üìä 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admin_users:');
    const { stdout: structure } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "\\d admin_users"`
    );
    console.log(structure);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìã 2. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–æ–≤:');
    const { stdout: adminData } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, password_hash, is_active, created_at FROM admin_users ORDER BY id;"`
    );
    console.log(adminData);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º bcrypt –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('\nüß™ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bcrypt –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
    const { stdout: bcryptTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        console.log('bcrypt version:', require('bcrypt/package.json').version);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à
        const testPassword = 'test123';
        const testHash = bcrypt.hashSync(testPassword, 10);
        console.log('Test hash:', testHash);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        const isValid = bcrypt.compareSync(testPassword, testHash);
        console.log('Test validation:', isValid);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
        const admin1Hash = bcrypt.hashSync('VitawinAdmin2025!', 10);
        const admin2Hash = bcrypt.hashSync('admin123', 10);
        
        console.log('\\n–ù–æ–≤—ã–µ —Ö–µ—à–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log('admin@vitawins.ru:', admin1Hash);
        console.log('dorosh21@gmail.com:', admin2Hash);
      "`
    );
    console.log(bcryptTest);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ adminAuthController
    console.log('\nüîé 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É adminAuthController:');
    const { stdout: authLogic } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function testAuthLogic() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'SET' : 'NOT SET');
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ adminAuthController
            const email = 'admin@vitawins.ru';
            const password = 'VitawinAdmin2025!';
            
            console.log('\\n–ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∞ –ø–æ email:', email);
            const result = await pool.query('SELECT * FROM admin_users WHERE email = \\$1', [email]);
            
            if (result.rows.length === 0) {
              console.log('–û–®–ò–ë–ö–ê: –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
              return;
            }
            
            const adminUser = result.rows[0];
            console.log('–ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω:', {
              id: adminUser.id,
              email: adminUser.email,
              is_active: adminUser.is_active,
              hash_starts_with: adminUser.password_hash.substring(0, 10)
            });
            
            console.log('\\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
            console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', password);
            console.log('–•–µ—à –∏–∑ –ë–î –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', adminUser.password_hash.substring(0, 20));
            
            const isValidPassword = await bcrypt.compare(password, adminUser.password_hash);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt.compare:', isValidPassword);
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        testAuthLogic();
      "`
    );
    console.log(authLogic);

    console.log('\nüí° –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã admin_users');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª–µ password_hash —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ bcrypt —Ö–µ—à–∏');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ bcrypt —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
    console.log('4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

debugAuth();