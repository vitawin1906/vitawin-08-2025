#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –ª–æ–≥–∏–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-admin-login.cjs <email> <password>
 */

const bcrypt = require('bcrypt');
const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const getDatabaseConfig = () => {
  if (process.env.DATABASE_URL) {
    return {
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    };
  }
  
  return {
    host: process.env.PGHOST || 'localhost',
    port: process.env.PGPORT || 5432,
    database: process.env.PGDATABASE || 'vitawin',
    user: process.env.PGUSER || 'postgres',
    password: process.env.PGPASSWORD || '',
    ssl: false
  };
};

async function testAdminLogin(email, password) {
  const pool = new Pool(getDatabaseConfig());
  
  try {
    if (!email || !password) {
      console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/test-admin-login.cjs <email> <password>');
      process.exit(1);
    }

    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ª–æ–≥–∏–Ω–∞...');
    console.log('üìß Email:', email);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admin_users:');
    const tableInfo = await pool.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'admin_users' 
      ORDER BY ordinal_position;
    `);
    
    if (tableInfo.rows.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ admin_users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:');
      console.log(`
CREATE TABLE admin_users (
  id SERIAL PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  password_hash TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  last_login TIMESTAMP
);`);
      return;
    }

    console.table(tableInfo.rows);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('\nüë• –í—Å–µ –∞–¥–º–∏–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
    const allAdmins = await pool.query('SELECT id, email, created_at, last_login FROM admin_users ORDER BY created_at;');
    if (allAdmins.rows.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ!');
    } else {
      console.table(allAdmins.rows);
    }

    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log(`\nüîç –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∞: ${email}`);
    const adminResult = await pool.query('SELECT * FROM admin_users WHERE email = $1', [email]);
    
    if (adminResult.rows.length === 0) {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∞ —Å –ø–æ–º–æ—â—å—é scripts/create-admin.cjs');
      return;
    }

    const admin = adminResult.rows[0];
    console.log('‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω:');
    console.log('   ID:', admin.id);
    console.log('   Email:', admin.email);
    console.log('   –°–æ–∑–¥–∞–Ω:', admin.created_at);
    console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:', admin.last_login || '–Ω–∏–∫–æ–≥–¥–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
    const isValidPassword = await bcrypt.compare(password, admin.password_hash);
    
    if (isValidPassword) {
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!');
      console.log('üéØ –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏:');
      console.log('   URL: /admin');
      console.log('   Email:', email);
      console.log('   –ü–∞—Ä–æ–ª—å:', password);
    } else {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
      console.log('üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é scripts/create-admin.cjs');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('   DATABASE_URL –∏–ª–∏ PGHOST/PGPORT/PGDATABASE/PGUSER/PGPASSWORD');
    }
  } finally {
    await pool.end();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const email = args[0];
const password = args[1];

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAdminLogin(email, password);