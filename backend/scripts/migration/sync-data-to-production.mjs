#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Neon (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞) –≤ Docker PostgreSQL (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)
 * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

import { createConnection } from 'mysql2/promise';
import pkg from 'pg';
const { Client } = pkg;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
const NEON_CONFIG = {
  connectionString: process.env.DATABASE_URL, // Neon (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
  ssl: { rejectUnauthorized: false }
};

const DOCKER_CONFIG = {
  host: 'localhost',
  port: 5432,
  database: 'vitawin',
  user: 'vitawin_user',
  password: process.env.POSTGRES_PASSWORD || 'strong_password_123'
};

async function syncData() {
  let neonClient, dockerClient;
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º
    neonClient = new Client(NEON_CONFIG);
    await neonClient.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon (–∏—Å—Ç–æ—á–Ω–∏–∫)');
    
    dockerClient = new Client(DOCKER_CONFIG);
    await dockerClient.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Docker PostgreSQL (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
    const productsResult = await neonClient.query('SELECT * FROM products ORDER BY id');
    const products = productsResult.rows;
    
    if (products.length > 0) {
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
      await dockerClient.query('TRUNCATE TABLE products RESTART IDENTITY CASCADE');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
      for (const product of products) {
        const insertQuery = `
          INSERT INTO products (
            id, name, title, description, price, original_price, 
            category, badge, image, images, stock, status, slug,
            benefits, key_benefits, quality_guarantee, composition,
            created_at, updated_at
          ) VALUES (
            $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,
            $14, $15, $16, $17, $18, $19
          )
        `;
        
        await dockerClient.query(insertQuery, [
          product.id, product.name, product.title, product.description,
          product.price, product.original_price, product.category, product.badge,
          product.image, product.images, product.stock, product.status, product.slug,
          product.benefits, product.key_benefits, product.quality_guarantee,
          product.composition, product.created_at, product.updated_at
        ]);
      }
      
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResult = await neonClient.query('SELECT * FROM users ORDER BY id');
    const users = usersResult.rows;
    
    if (users.length > 0) {
      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
      await dockerClient.query('TRUNCATE TABLE users RESTART IDENTITY CASCADE');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of users) {
        const insertQuery = `
          INSERT INTO users (
            id, telegram_id, username, first_name, last_name, 
            referral_code, referred_by, balance, created_at, updated_at
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        `;
        
        await dockerClient.query(insertQuery, [
          user.id, user.telegram_id, user.username, user.first_name,
          user.last_name, user.referral_code, user.referred_by,
          user.balance, user.created_at, user.updated_at
        ]);
      }
      
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    - –¢–æ–≤–∞—Ä—ã: ${products.length}
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    if (neonClient) await neonClient.end();
    if (dockerClient) await dockerClient.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  syncData();
}

export { syncData };