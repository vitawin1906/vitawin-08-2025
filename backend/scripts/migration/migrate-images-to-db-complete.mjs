// –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏

async function completeImageMigration() {
  try {
    console.log('=== –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ü–£–¢–ï–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const response = await fetch('http://localhost:5050/api/products');
    const data = await response.json();

    if (!data.products) {
      console.log('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${data.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);

    let correctPaths = 0;
    let incorrectPaths = 0;
    let totalImages = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data.products.forEach(product => {
      console.log(`–¢–æ–≤–∞—Ä: ${product.name} (ID: ${product.id})`);
      
      if (product.images && product.images.length > 0) {
        product.images.forEach((imagePath, index) => {
          totalImages++;
          console.log(`  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}: ${imagePath}`);
          
          if (imagePath.startsWith('/api/uploads/')) {
            correctPaths++;
            console.log('    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å');
          } else {
            incorrectPaths++;
            console.log('    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å');
          }
        });
      } else {
        console.log('  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      }
      console.log('');
    });

    console.log('=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages}`);
    console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏: ${correctPaths}`);
    console.log(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏: ${incorrectPaths}`);

    if (incorrectPaths === 0) {
      console.log('\n‚úÖ –í—Å–µ –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      console.log('\n=== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===');
      
      let availableImages = 0;
      let unavailableImages = 0;
      
      for (const product of data.products) {
        if (product.images && product.images.length > 0) {
          for (const imagePath of product.images) {
            try {
              const fullImageUrl = `http://localhost:5000${imagePath}`;
              const imageResponse = await fetch(fullImageUrl, { method: 'HEAD' });
              
              if (imageResponse.status === 200) {
                availableImages++;
                console.log(`‚úÖ ${imagePath}`);
              } else {
                unavailableImages++;
                console.log(`‚ùå ${imagePath} (${imageResponse.status})`);
              }
            } catch (error) {
              unavailableImages++;
              console.log(`‚ùå ${imagePath} (–æ—à–∏–±–∫–∞: ${error.message})`);
            }
          }
        }
      }
      
      console.log(`\n–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${availableImages}/${totalImages}`);
      console.log(`–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${unavailableImages}/${totalImages}`);
      
      if (unavailableImages === 0) {
        console.log('\nüéâ –í–°–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–û–°–¢–£–ü–ù–´ –ò –ü–£–¢–ò –ö–û–†–†–ï–ö–¢–ù–´!');
      } else {
        console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –ø—É—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }
      
    } else {
      console.log('\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –º–∏–≥—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∫–∏
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ===');
    
    try {
      const siteScriptsResponse = await fetch('http://localhost:5000/api/site-scripts');
      const scriptsData = await siteScriptsResponse.json();
      
      console.log('–°—Ç–∞—Ç—É—Å API —Å–∫—Ä–∏–ø—Ç–æ–≤:', siteScriptsResponse.status);
      console.log('Head —Å–∫—Ä–∏–ø—Ç—ã:', scriptsData.head_scripts?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
      console.log('Body —Å–∫—Ä–∏–ø—Ç—ã:', scriptsData.body_scripts?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
      
      if (scriptsData.success) {
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥');
      } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–∫—Ä–∏–ø—Ç–æ–≤');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error.message);
    }

    console.log('\n=== –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===');
    console.log('1. –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('2. –ü—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', correctPaths === totalImages ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã' : '‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    console.log('3. –ü–µ—Ä–µ–¥–∞—á–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('4. –ê–¥–º–∏–Ω–∫–∞ -> –§—Ä–æ–Ω—Ç–µ–Ω–¥: ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
    if (correctPaths === totalImages && unavailableImages === 0) {
      console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      console.log('–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:');
      if (correctPaths !== totalImages) {
        console.log('- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      }
      if (unavailableImages > 0) {
        console.log('- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

completeImageMigration();