#!/usr/bin/env node

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ —Å –Ω—É–ª—è
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function forceResetAdmins() {
  console.log('\nüî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–û–í\n');
  
  try {
    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('üóëÔ∏è 1. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "DELETE FROM admin_users;"`
    );

    // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º sequence
    console.log('üîÑ 2. –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "ALTER SEQUENCE admin_users_id_seq RESTART WITH 1;"`
    );

    // 3. –°–æ–∑–¥–∞–µ–º —Ö–µ—à–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üîë 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö bcrypt —Ö–µ—à–µ–π...');
    const { stdout: hashData } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        
        async function generateHashes() {
          const hash1 = await bcrypt.hash('VitawinAdmin2025!', 12);
          const hash2 = await bcrypt.hash('admin123', 12);
          
          console.log('HASH1=' + hash1);
          console.log('HASH2=' + hash2);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ä–∞–∑—É
          const test1 = await bcrypt.compare('VitawinAdmin2025!', hash1);
          const test2 = await bcrypt.compare('admin123', hash2);
          
          console.log('TEST1=' + test1);
          console.log('TEST2=' + test2);
        }
        
        generateHashes().catch(console.error);
      "`
    );

    const lines = hashData.split('\n').filter(line => line.trim());
    const hash1 = lines.find(line => line.startsWith('HASH1=')).replace('HASH1=', '');
    const hash2 = lines.find(line => line.startsWith('HASH2=')).replace('HASH2=', '');
    const test1 = lines.find(line => line.startsWith('TEST1=')).replace('TEST1=', '');
    const test2 = lines.find(line => line.startsWith('TEST2=')).replace('TEST2=', '');

    console.log('Admin hash validation:', test1);
    console.log('Dorosh hash validation:', test2);

    if (test1 !== 'true' || test2 !== 'true') {
      throw new Error('–•–µ—à–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
    }

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('\nüë§ 4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        INSERT INTO admin_users (email, password_hash, is_active, created_at, updated_at, last_login) VALUES 
        ('admin@vitawins.ru', '${hash1}', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL),
        ('dorosh21@gmail.com', '${hash2}', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL);
      "`
    );

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n‚úÖ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤:');
    const { stdout: finalCheck } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, is_active, created_at, LEFT(password_hash, 25) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(finalCheck);

    // 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüß™ 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const { stdout: finalTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function finalAuthTest() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            // –¢–µ—Å—Ç admin@vitawins.ru
            const result1 = await pool.query('SELECT password_hash FROM admin_users WHERE email = \\$1', ['admin@vitawins.ru']);
            if (result1.rows.length > 0) {
              const isValid1 = await bcrypt.compare('VitawinAdmin2025!', result1.rows[0].password_hash);
              console.log('admin@vitawins.ru –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', isValid1 ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå');
            }
            
            // –¢–µ—Å—Ç dorosh21@gmail.com  
            const result2 = await pool.query('SELECT password_hash FROM admin_users WHERE email = \\$1', ['dorosh21@gmail.com']);
            if (result2.rows.length > 0) {
              const isValid2 = await bcrypt.compare('admin123', result2.rows[0].password_hash);
              console.log('dorosh21@gmail.com –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', isValid2 ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå');
            }
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        finalAuthTest();
      "`
    );
    console.log(finalTest);

    console.log('\nüéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('‚Ä¢ admin@vitawins.ru: VitawinAdmin2025!');
    console.log('‚Ä¢ dorosh21@gmail.com: admin123');
    console.log('\nüåê URL: https://vitawins.ru/admin');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è:', error.message);
  }
}

forceResetAdmins();