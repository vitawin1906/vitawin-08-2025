#!/usr/bin/env node

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function updateExistingAdmins() {
  console.log('\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ê–î–ú–ò–ù–û–í\n');
  
  try {
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('üìä 1. –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:');
    const { stdout: currentAdmins } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, is_active, LEFT(password_hash, 25) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(currentAdmins);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ö–µ—à–∏
    console.log('\nüîë 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö bcrypt —Ö–µ—à–µ–π...');
    const { stdout: hashGeneration } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        
        async function generateHashes() {
          try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏ —Å 10 —Ä–∞—É–Ω–¥–∞–º–∏
            const hash1 = await bcrypt.hash('VitawinAdmin2025!', 10);
            const hash2 = await bcrypt.hash('admin123', 10);
            
            console.log('ADMIN_HASH=' + hash1);
            console.log('DOROSH_HASH=' + hash2);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º
            const test1 = await bcrypt.compare('VitawinAdmin2025!', hash1);
            const test2 = await bcrypt.compare('admin123', hash2);
            
            console.log('ADMIN_TEST=' + test1);
            console.log('DOROSH_TEST=' + test2);
            
          } catch (error) {
            console.error('Error:', error.message);
          }
        }
        
        generateHashes();
      "`
    );

    console.log(hashGeneration);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à–∏
    const lines = hashGeneration.split('\n').filter(line => line.trim());
    const adminHash = lines.find(line => line.startsWith('ADMIN_HASH=')).replace('ADMIN_HASH=', '');
    const doroshHash = lines.find(line => line.startsWith('DOROSH_HASH=')).replace('DOROSH_HASH=', '');
    const adminTest = lines.find(line => line.startsWith('ADMIN_TEST=')).replace('ADMIN_TEST=', '');
    const doroshTest = lines.find(line => line.startsWith('DOROSH_TEST=')).replace('DOROSH_TEST=', '');

    if (adminTest !== 'true' || doroshTest !== 'true') {
      throw new Error('–•–µ—à–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('\nüíæ 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º admin@vitawins.ru
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        UPDATE admin_users 
        SET password_hash = '${adminHash}', 
            updated_at = CURRENT_TIMESTAMP 
        WHERE email = 'admin@vitawins.ru';
      "`
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º dorosh21@gmail.com
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        UPDATE admin_users 
        SET password_hash = '${doroshHash}', 
            updated_at = CURRENT_TIMESTAMP 
        WHERE email = 'dorosh21@gmail.com';
      "`
    );

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    console.log('\n‚úÖ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤:');
    const { stdout: updatedAdmins } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, is_active, updated_at, LEFT(password_hash, 25) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(updatedAdmins);

    // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüß™ 5. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const { stdout: authTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function testAuth() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin@vitawins.ru...');
            const result1 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['admin@vitawins.ru']);
            
            if (result1.rows.length > 0) {
              const admin = result1.rows[0];
              const isValid = await bcrypt.compare('VitawinAdmin2025!', admin.password_hash);
              console.log('admin@vitawins.ru + VitawinAdmin2025!: ' + (isValid ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            } else {
              console.log('admin@vitawins.ru: NOT FOUND ‚ùå');
            }
            
            console.log('\\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dorosh21@gmail.com...');
            const result2 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['dorosh21@gmail.com']);
            
            if (result2.rows.length > 0) {
              const admin2 = result2.rows[0];
              const isValid2 = await bcrypt.compare('admin123', admin2.password_hash);
              console.log('dorosh21@gmail.com + admin123: ' + (isValid2 ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            } else {
              console.log('dorosh21@gmail.com: NOT FOUND ‚ùå');
            }
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        testAuth();
      "`
    );

    console.log(authTest);

    console.log('\nüéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:');
    console.log('‚Ä¢ Email: admin@vitawins.ru');
    console.log('‚Ä¢ –ü–∞—Ä–æ–ª—å: VitawinAdmin2025!');
    console.log('');
    console.log('‚Ä¢ Email: dorosh21@gmail.com');
    console.log('‚Ä¢ –ü–∞—Ä–æ–ª—å: admin123');
    console.log('\nüåê URL –∞–¥–º–∏–Ω–∫–∏: https://vitawins.ru/admin');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

updateExistingAdmins();