import { storage } from '../storage/storage/storage';
import { User } from '../../shared/schema';

interface TelegramNotificationService {
  sendReferralNotification(referrerId: number, newReferral: User, level: number): Promise<void>;
  sendBonusNotification(userId: number, amount: number, sourceUserName: string, level: number): Promise<void>;
}

class TelegramNotificationServiceImpl implements TelegramNotificationService {
  private botToken: string;
  private baseUrl: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendReferralNotification(referrerId: number, newReferral: User, level: number): Promise<void> {
    try {
      const referrer = await storage.getUser(referrerId);
      if (!referrer || !referrer.telegram_id) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referrerId}`);
        return;
      }

      const levelText = level === 1 ? '1-–≥–æ —É—Ä–æ–≤–Ω—è' : level === 2 ? '2-–≥–æ —É—Ä–æ–≤–Ω—è' : '3-–≥–æ —É—Ä–æ–≤–Ω—è';
      const bonusPercentage = level === 1 ? '20%' : level === 2 ? '5%' : '1%';

      const message = `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª ${levelText}!

üë§ ${newReferral.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
üí∞ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å ${bonusPercentage} —Å –∫–∞–∂–¥–æ–π –µ–≥–æ –ø–æ–∫—É–ø–∫–∏
üîó –£—Ä–æ–≤–µ–Ω—å: ${level}

üí° –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referrer.telegram_id}
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats`;

      await this.sendMessage(referrer.telegram_id, message);
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${referrer.name} (ID: ${referrer.telegram_id})`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ:', error);
    }
  }

  async sendBonusNotification(userId: number, amount: number, sourceUserName: string, level: number): Promise<void> {
    try {
      const user = await storage.getUser(userId);
      if (!user || !user.telegram_id) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
      }

      const levelText = level === 1 ? '1-–≥–æ —É—Ä–æ–≤–Ω—è' : level === 2 ? '2-–≥–æ —É—Ä–æ–≤–Ω—è' : '3-–≥–æ —É—Ä–æ–≤–Ω—è';
      const formattedAmount = amount.toFixed(2);

      const message = `üí∞ –ù–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!

üë§ –û—Ç: ${sourceUserName} (—Ä–µ—Ñ–µ—Ä–∞–ª ${levelText})
üíµ –°—É–º–º–∞: ${formattedAmount} —Ä—É–±.
üìà –£—Ä–æ–≤–µ–Ω—å: ${level}

üí° –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –±–æ–Ω—É—Å—ã: /bonuses`;

      await this.sendMessage(user.telegram_id, message);
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} (ID: ${user.telegram_id})`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ:', error);
    }
  }

  private async sendMessage(telegramId: number, text: string): Promise<void> {
    if (!this.botToken) {
      console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN');
      return;
    }

    try {
      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramId,
          text: text,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, errorData);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if (errorData.error_code === 400 && errorData.description.includes('chat not found')) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.`);
        } else if (errorData.error_code === 403) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.`);
        }
      } else {
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }
}

export const telegramNotificationService = new TelegramNotificationServiceImpl();