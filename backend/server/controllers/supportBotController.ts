import { Request, Response } from 'express';
import { storage } from '../storage/storage/storage';

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: {
    id: number;
    type: string;
  };
  date: number;
  text?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: {
    id: string;
    from: TelegramUser;
    message?: TelegramMessage;
    data?: string;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function sendSupportMessage(chatId: number, text: string, replyMarkup?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_SUPPORT_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        reply_markup: replyMarkup,
        parse_mode: 'HTML'
      })
    });
    
    const result = await response.json();
    if (!result.ok) {
      console.error('Support Bot API error:', result);
    }
    return result;
  } catch (error) {
    console.error('Error sending support message:', error);
    return { ok: false, error };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
function createSupportKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
          callback_data: "contact_manager"
        }
      ],
      [
        {
          text: "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
          callback_data: "faq"
        },
        {
          text: "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
          callback_data: "instructions"
        }
      ],
      [
        {
          text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
          url: "https://vitawins.ru"
        }
      ],
      [
        {
          text: "üë§ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç",
          url: "https://t.me/Vitawin_bot"
        }
      ]
    ]
  };
}

class SupportBotController {
  // Webhook –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  async webhook(req: Request, res: Response) {
    try {
      console.log('Support Bot webhook received:', JSON.stringify(req.body, null, 2));
      
      const update: TelegramUpdate = req.body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
      if (update.callback_query) {
        const callbackQuery = update.callback_query;
        const user = callbackQuery.from;
        const data = callbackQuery.data;
        const chatId = callbackQuery.message?.chat.id;

        if (!chatId) {
          res.status(200).json({ ok: true });
          return;
        }

        console.log(`Processing callback query from user ${user.id}: ${data}`);

        switch (data) {
          case 'contact_manager':
            await sendSupportMessage(chatId, `üéØ –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: support@vitawins.ru
üí¨ Telegram: @vitawin_manager

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–ù-–ü–¢ 9:00-18:00 (–ú–°–ö)

üîî –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.`);
            break;

          case 'faq':
            await sendSupportMessage(chatId, `‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

üõí <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?</b>
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —á–µ—Ä–µ–∑ @Vitawin_bot –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã

üí≥ <b>–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?</b>
–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

üöö <b>–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?</b>
3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –†–æ—Å—Å–∏–∏

üí∞ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?</b>
–ü–æ–ª—É—á–∞–π—Ç–µ 20% —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, 5% —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è

üìû –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"`);
            break;

          case 'instructions':
            await sendSupportMessage(chatId, `üìã –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

1Ô∏è‚É£ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>
–ù–∞–ø–∏—à–∏—Ç–µ /start –≤ @Vitawin_bot

2Ô∏è‚É£ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞</b>
–í–∞—à –∫–æ–¥ = –≤–∞—à Telegram ID

3Ô∏è‚É£ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π</b>
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–¥–æ–º

4Ô∏è‚É£ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

5Ô∏è‚É£ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>
–ß–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ

üí° –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!`);
            break;

          default:
            await sendSupportMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }

        res.status(200).json({ ok: true });
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!update.message || !update.message.text) {
        console.log('No message or text in support bot update, skipping');
        res.status(200).json({ ok: true });
        return;
      }

      const message = update.message;
      const user = message.from;
      const text = message.text?.trim();

      if (!user) {
        console.log('No user data in support bot message, skipping');
        res.status(200).json({ ok: true });
        return;
      }

      console.log(`Processing support message from user ${user.id}: ${text}`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (text && (text === '/start' || text.startsWith('/start '))) {
        const welcomeMessage = `ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ VitaWin!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ  
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –°–≤—è–∑—å—é —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:`;

        const keyboard = createSupportKeyboard();
        await sendSupportMessage(message.chat.id, welcomeMessage, keyboard);
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
      else if (text === '/help') {
        const helpMessage = `üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º!`;

        await sendSupportMessage(message.chat.id, helpMessage);
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /contact
      else if (text === '/contact') {
        await sendSupportMessage(message.chat.id, `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ VitaWin:

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
üìß Email: support@vitawins.ru
üí¨ Telegram: @vitawin_manager

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–ù-–ü–¢ 9:00-18:00 (–ú–°–ö)

üîî –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞: 2-4 —á–∞—Å–∞`);
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else {
        const autoReplyMessage = `üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

üìù –í–∞—à –≤–æ–ø—Ä–æ—Å: "${text}"

üîÑ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

‚ö° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`;

        const keyboard = createSupportKeyboard();
        await sendSupportMessage(message.chat.id, autoReplyMessage, keyboard);
      }

      console.log('Support webhook processed successfully');
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Error processing support webhook:', error);
      res.status(500).json({ ok: false, error: 'Internal server error' });
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  async setWebhook(req: Request, res: Response) {
    try {
      const webhookUrl = `https://vitawins.ru/api/telegram/support/webhook`;
      
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_SUPPORT_BOT_TOKEN}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['message', 'callback_query']
        })
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log('Support bot webhook set successfully:', webhookUrl);
        res.json({ 
          success: true, 
          message: 'Support bot webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          webhook_url: webhookUrl
        });
      } else {
        console.error('Failed to set support bot webhook:', result);
        res.status(400).json({ 
          success: false, 
          error: result.description || '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
        });
      }
    } catch (error) {
      console.error('Error setting support bot webhook:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook'
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
  async getWebhookInfo(req: Request, res: Response) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_SUPPORT_BOT_TOKEN}/getWebhookInfo`);
      const result = await response.json();

      res.json(result);
    } catch (error) {
      console.error('Error getting support bot webhook info:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ webhook
  async deleteWebhook(req: Request, res: Response) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_SUPPORT_BOT_TOKEN}/deleteWebhook`, {
        method: 'POST'
      });

      const result = await response.json();
      
      if (result.ok) {
        res.json({ 
          success: true, 
          message: 'Support bot webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
        });
      } else {
        res.status(400).json({ 
          success: false, 
          error: result.description || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook' 
        });
      }
    } catch (error) {
      console.error('Error deleting support bot webhook:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
}

export const supportBotController = new SupportBotController();