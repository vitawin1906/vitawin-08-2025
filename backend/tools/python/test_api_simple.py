#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ VitaWin –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://vitawins.ru"

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    session = requests.Session()
    session.verify = False
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    tests = [
        {
            "name": "Health Check",
            "method": "GET",
            "url": "/health",
            "expected": 200
        },
        {
            "name": "Get Products",
            "method": "GET", 
            "url": "/api/products?limit=5",
            "expected": 200
        },
        {
            "name": "Get Specific Product",
            "method": "GET",
            "url": "/api/product/18",
            "expected": [200, 404]
        },
        {
            "name": "Get Blog Posts",
            "method": "GET",
            "url": "/api/blog?limit=5", 
            "expected": 200
        },
        {
            "name": "Get Site Scripts",
            "method": "GET",
            "url": "/api/site-scripts",
            "expected": 200
        },
        {
            "name": "Get Cart (Guest)",
            "method": "GET",
            "url": "/api/cart",
            "expected": 200
        },
        {
            "name": "Add to Cart (Guest)",
            "method": "POST",
            "url": "/api/cart",
            "data": {"product_id": 18, "quantity": 1},
            "expected": [200, 400]
        },
        {
            "name": "Get User by Telegram ID",
            "method": "GET",
            "url": "/api/user/telegram/1622907369",
            "expected": [200, 404]
        },
        {
            "name": "Get MLM Levels",
            "method": "GET",
            "url": "/api/mlm/levels",
            "expected": 200
        }
    ]
    
    results = {"passed": 0, "failed": 0, "total": len(tests)}
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(tests)} API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {BASE_URL}")
    print("-" * 50)
    
    for test in tests:
        try:
            url = BASE_URL + test["url"]
            
            if test["method"] == "GET":
                response = session.get(url, timeout=10)
            elif test["method"] == "POST":
                response = session.post(url, json=test.get("data"), timeout=10)
            else:
                print(f"‚ùå {test['name']}: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ {test['method']}")
                results["failed"] += 1
                continue
                
            expected = test["expected"]
            if isinstance(expected, list):
                success = response.status_code in expected
            else:
                success = response.status_code == expected
                
            if success:
                print(f"‚úÖ {test['name']}: {response.status_code}")
                results["passed"] += 1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è JSON –æ—Ç–≤–µ—Ç–æ–≤
                if response.status_code == 200 and 'application/json' in response.headers.get('content-type', ''):
                    try:
                        data = response.json()
                        if "success" in data and not data["success"]:
                            print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: success=false –≤ –æ—Ç–≤–µ—Ç–µ")
                    except json.JSONDecodeError:
                        pass
                        
            else:
                print(f"‚ùå {test['name']}: –û–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                results["failed"] += 1
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {test['name']}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - {e}")
            results["failed"] += 1
        except Exception as e:
            print(f"‚ùå {test['name']}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results["failed"] += 1
    
    print("-" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ—à–ª–æ: {results['passed']}")
    print(f"   ‚ùå –ù–µ –ø—Ä–æ—à–ª–æ: {results['failed']}")
    print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(results['passed'] / results['total'] * 100):.1f}%")
    
    if results["failed"] == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è  {results['failed']} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return results

if __name__ == "__main__":
    test_api_endpoints()