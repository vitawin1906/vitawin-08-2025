import { Request, Response } from 'express';
import { storage } from '../storage/storage/storage';
import { db } from '../storage/storage/storage';
import { users, orders, aiTasks, userCashbacks, networkConnections, aiLogs } from '../../shared/schema';
import { eq, desc, and, isNull, sum, count, sql } from 'drizzle-orm';
// import OpenAI from 'openai'; // –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ OpenAI –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import { telegramNotificationService } from '../services/telegramNotificationService';

// –ó–ê–ì–õ–£–®–ö–ê –≤–º–µ—Å—Ç–æ OpenAI
export const advancedAIControllerStub = (req, res) => {
  res.status(501).json({ error: 'AI functionality is disabled (no OpenAI key)' });
};

// –ò–ò –ê–≥–µ–Ω—Ç: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–µ—Ç—å—é
export class AIReferralAgent {
  
  // 1. –ê–Ω–∞–ª–∏–∑ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
  async analyzeReferralNetwork() {
    try {
      console.log('ü§ñ –ò–ò –ê–≥–µ–Ω—Ç: –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
      const allUsers = await db.select().from(users);
      
      // –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É —Å–≤—è–∑–µ–π
      const networkMap = new Map();
      const levels = new Map(); // user_id -> level
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
      const rootUsers = allUsers.filter(user => !user.referral_code_used);
      rootUsers.forEach(user => {
        levels.set(user.id, 0);
        networkMap.set(user.id, { 
          user, 
          level: 0, 
          children: [], 
          referrals: [] 
        });
      });
      
      // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –¥–æ 3 —É—Ä–æ–≤–Ω–µ–π
      for (let level = 1; level <= 3; level++) {
        const currentLevelUsers = allUsers.filter(user => {
          if (!user.referral_code_used) return false;
          
          // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
          const referrer = allUsers.find(ref => 
            ref.telegram_id?.toString() === user.referral_code_used
          );
          
          if (!referrer) return false;
          
          const referrerLevel = levels.get(referrer.id);
          return referrerLevel === level - 1;
        });
        
        currentLevelUsers.forEach(user => {
          const referrer = allUsers.find(ref => 
            ref.telegram_id?.toString() === user.referral_code_used
          );
          
          if (referrer && networkMap.has(referrer.id)) {
            levels.set(user.id, level);
            
            const userNode = {
              user,
              level,
              children: [],
              referrals: []
            };
            
            networkMap.set(user.id, userNode);
            networkMap.get(referrer.id).children.push(userNode);
            networkMap.get(referrer.id).referrals.push(user);
          }
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveNetworkConnections(networkMap, levels);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ò–ò
      const analysis = await this.generateNetworkAnalysis(networkMap, allUsers);
      
      console.log('‚úÖ –ò–ò –ê–≥–µ–Ω—Ç: –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
      
      return {
        totalUsers: allUsers.length,
        maxDepth: Math.max(...Array.from(levels.values())),
        rootNodes: rootUsers.length,
        networkStructure: this.formatNetworkForDisplay(networkMap),
        analysis
      };
      
    } catch (error) {
      console.error('‚ùå –ò–ò –ê–≥–µ–Ω—Ç: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏:', error);
      await this.createErrorTask('network_analysis_error', error);
      throw error;
    }
  }
  
  // 1.5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
  async notifyReferralChain(newUser: any) {
    try {
      console.log(`ü§ñ –ò–ò –ê–≥–µ–Ω—Ç: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ ${newUser.name}...`);
      
      if (!newUser.referrer_id && !newUser.applied_referral_code) {
        console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
      const referralChain = await this.buildReferralChain(newUser);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —Ä–µ—Ñ–µ—Ä–µ–∞–º –≤ —Ü–µ–ø–æ—á–∫–µ (–¥–æ 3 —É—Ä–æ–≤–Ω–µ–π)
      for (let i = 0; i < Math.min(referralChain.length, 3); i++) {
        const referrer = referralChain[i];
        
        await telegramNotificationService.sendReferralNotification(
          referrer.user.id,
          newUser,
          i + 1
        );
        
        console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${referrer.user.name} (—É—Ä–æ–≤–µ–Ω—å ${i + 1})`);
      }
      
      console.log('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      
    } catch (error) {
      console.error('‚ùå –ò–ò –ê–≥–µ–Ω—Ç: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ:', error);
    }
  }

  // 2. –†–∞—Å—á–µ—Ç –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
  async calculateAndDistributeBonuses(orderId: number) {
    console.log(`=== –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–ß–ï–¢ –ë–û–ù–£–°–û–í –î–õ–Ø –ó–ê–ö–ê–ó–ê ${orderId} ===`);
    try {
      console.log(`ü§ñ –ò–ò –ê–≥–µ–Ω—Ç: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –±–æ–Ω—É—Å—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}...`);
      console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const orderDirect = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
      console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–∞:', orderDirect);
      
      const order = orderDirect[0];
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î:', order ? { id: order.id, user_id: order.user_id } : '–∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      if (!order) {
        console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é');
        throw new Error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const buyerDirect = await db.select().from(users).where(eq(users.id, order.user_id)).limit(1);
      const buyer = buyerDirect[0];
      
      if (!buyer) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${order.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:', {
        id: buyer.id,
        name: buyer.first_name,
        referrer_id: buyer.referrer_id,
        applied_referral_code: buyer.applied_referral_code
      });
      
      // –ï—Å–ª–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ - –±–æ–Ω—É—Å—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º
      if (!buyer.referrer_id) {
        console.log('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ - –±–æ–Ω—É—Å—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è');
        return { bonusesCalculated: 0 };
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –¥–æ 3 —É—Ä–æ–≤–Ω–µ–π
      const referralChain = await this.buildReferralChain(buyer);
      console.log('üîó –¶–µ–ø–æ—á–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:', referralChain.map(r => `${r.user.name} (—É—Ä–æ–≤–µ–Ω—å ${r.level})`));
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º: 20%, 5%, 1%
      const bonusRates = [0.20, 0.05, 0.01]; // –£—Ä–æ–≤–Ω–∏ 1, 2, 3
      const orderAmount = parseFloat(order.total);
      const bonuses = [];
      
      for (let i = 0; i < Math.min(referralChain.length, 3); i++) {
        const referrer = referralChain[i];
        const bonusAmount = orderAmount * bonusRates[i];
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–Ω—É—Å–µ
        const cashback = await db.insert(userCashbacks).values({
          user_id: referrer.user.id,
          type: 'referral_bonus',
          amount: bonusAmount.toFixed(2),
          source_order_id: orderId,
          source_user_id: buyer.id,
          referral_level: i + 1,
          status: 'pending'
        }).returning();
        
        bonuses.push({
          referrer: referrer.user,
          level: i + 1,
          amount: bonusAmount,
          percentage: bonusRates[i] * 100
        });
        
        console.log(`üí∞ –ë–æ–Ω—É—Å ${bonusAmount.toFixed(2)} —Ä—É–±. (${bonusRates[i] * 100}%) –Ω–∞—á–∏—Å–ª–µ–Ω ${referrer.user.name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ –≤ Telegram
        await telegramNotificationService.sendBonusNotification(
          referrer.user.id,
          bonusAmount,
          buyer.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          i + 1
        );
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      await this.logOperation('info', '–ë–æ–Ω—É—Å—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã', {
        orderId,
        buyerId: buyer.id,
        totalBonuses: bonuses.reduce((sum, b) => sum + b.amount, 0),
        bonusCount: bonuses.length
      });
      
      console.log('‚úÖ –ò–ò –ê–≥–µ–Ω—Ç: –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
      
      return {
        bonusesCalculated: bonuses.length,
        totalAmount: bonuses.reduce((sum, b) => sum + b.amount, 0),
        bonuses
      };
      
    } catch (error) {
      console.error('‚ùå –ò–ò –ê–≥–µ–Ω—Ç: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤:', error);
      await this.createErrorTask('bonus_calculation_error', error, { orderId });
      throw error;
    }
  }
  
  // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  async monitorSystemHealth() {
    try {
      console.log('ü§ñ –ò–ò –ê–≥–µ–Ω—Ç: –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...');
      
      const healthChecks = [];
      let overallScore = 100;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
      const referralCheck = await this.checkReferralIntegrity();
      healthChecks.push(referralCheck);
      if (!referralCheck.passed) overallScore -= 20;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ–Ω—É—Å–∞–º–∏
      const bonusCheck = await this.checkBonusIntegrity();
      healthChecks.push(bonusCheck);
      if (!bonusCheck.passed) overallScore -= 15;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
      const errorCheck = await this.checkSystemErrors();
      healthChecks.push(errorCheck);
      if (!errorCheck.passed) overallScore -= 10;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbCheck = await this.checkDatabasePerformance();
      healthChecks.push(dbCheck);
      if (!dbCheck.passed) overallScore -= 15;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
      const recommendations = await this.generateHealthRecommendations(healthChecks);
      
      const healthReport = {
        score: Math.max(0, overallScore),
        status: overallScore >= 80 ? 'excellent' : overallScore >= 60 ? 'good' : overallScore >= 40 ? 'warning' : 'critical',
        checks: healthChecks,
        recommendations,
        timestamp: new Date()
      };
      
      console.log(`üìä –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${overallScore}% (${healthReport.status})`);
      
      return healthReport;
      
    } catch (error) {
      console.error('‚ùå –ò–ò –ê–≥–µ–Ω—Ç: –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      await this.createErrorTask('health_monitoring_error', error);
      throw error;
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  
  private async buildReferralChain(user: any, maxDepth = 3): Promise<any[]> {
    const chain = [];
    let currentUser = user;
    let level = 1;
    
    while (currentUser.referrer_id && level <= maxDepth) {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ ID
      const referrer = await db.select().from(users)
        .where(eq(users.id, currentUser.referrer_id))
        .limit(1);
      
      if (referrer.length === 0) break;
      
      chain.push({
        user: referrer[0],
        level
      });
      
      currentUser = referrer[0];
      level++;
    }
    
    return chain;
  }
  
  private async saveNetworkConnections(networkMap: Map<any, any>, levels: Map<any, any>) {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    await db.delete(networkConnections);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
    const userIds = Array.from(networkMap.keys());
    for (const userId of userIds) {
      const node = networkMap.get(userId);
      if (node && node.level > 0) {
        // –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é
        const path = this.buildPathToRoot(userId, networkMap);
        
        await db.insert(networkConnections).values({
          user_id: userId,
          referrer_id: this.findDirectReferrer(userId, networkMap),
          level: node.level,
          path,
          is_active: true,
          verified_at: new Date()
        });
      }
    }
  }
  
  private buildPathToRoot(userId: number, networkMap: Map<any, any>): string {
    const path = [userId];
    let current = networkMap.get(userId);
    
    // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –¥–µ—Ä–µ–≤—É –¥–æ –∫–æ—Ä–Ω—è
    while (current && current.level > 0) {
      const referrerId = this.findDirectReferrer(current.user.id, networkMap);
      if (referrerId) {
        path.unshift(referrerId);
        current = networkMap.get(referrerId);
      } else {
        break;
      }
    }
    
    return path.join('->');
  }
  
  private findDirectReferrer(userId: number, networkMap: Map<any, any>): number | null {
    const referrerIds = Array.from(networkMap.keys());
    for (const referrerId of referrerIds) {
      const node = networkMap.get(referrerId);
      if (node && node.children.some((child: any) => child.user.id === userId)) {
        return referrerId;
      }
    }
    return null;
  }
  
  private formatNetworkForDisplay(networkMap: Map<any, any>) {
    const result = [];
    const userIds = Array.from(networkMap.keys());
    
    for (const userId of userIds) {
      const node = networkMap.get(userId);
      if (node && node.level === 0) { // –ö–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã
        result.push(this.formatNodeRecursive(node));
      }
    }
    
    return result;
  }
  
  private formatNodeRecursive(node: any): any {
    return {
      id: node.user.id,
      name: node.user.name,
      telegramId: node.user.telegram_id,
      level: node.level,
      children: node.children.map((child: any) => this.formatNodeRecursive(child)),
      stats: {
        directReferrals: node.children.length,
        totalNetwork: this.countTotalNetwork(node)
      }
    };
  }
  
  private countTotalNetwork(node: any): number {
    let count = node.children.length;
    for (const child of node.children) {
      count += this.countTotalNetwork(child);
    }
    return count;
  }
  
  private async generateNetworkAnalysis(networkMap: Map<any, any>, allUsers: any[]) {
    // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö API
    const networkStats = {
      totalUsers: allUsers.length,
      rootUsers: Array.from(networkMap.values()).filter(n => n.level === 0).length,
      level1Users: Array.from(networkMap.values()).filter(n => n.level === 1).length,
      level2Users: Array.from(networkMap.values()).filter(n => n.level === 2).length,
      level3Users: Array.from(networkMap.values()).filter(n => n.level === 3).length
    };
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let summary = '';
    const recommendations = [];
    
    if (networkStats.totalUsers === 0) {
      summary = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –ø—É—Å—Ç–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–ª–µ—á—å –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.';
      recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } else if (networkStats.rootUsers === networkStats.totalUsers) {
      summary = '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä–Ω–µ–≤—ã–º–∏ - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.';
      recommendations.push('–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π');
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    } else {
      const referralRate = ((networkStats.totalUsers - networkStats.rootUsers) / networkStats.totalUsers * 100).toFixed(1);
      summary = `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞: ${referralRate}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º. –ì–ª—É–±–∏–Ω–∞ —Å–µ—Ç–∏: ${Math.max(
        networkStats.level1Users > 0 ? 1 : 0,
        networkStats.level2Users > 0 ? 2 : 0,
        networkStats.level3Users > 0 ? 3 : 0
      )} —É—Ä–æ–≤–Ω—è.`;
      
      if (parseFloat(referralRate) < 30) {
        recommendations.push('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - —É–≤–µ–ª–∏—á—å—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
      }
      if (networkStats.level2Users < networkStats.level1Users * 0.3) {
        recommendations.push('–ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 2-–≥–æ —É—Ä–æ–≤–Ω—è - —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
      }
      if (networkStats.level3Users === 0) {
        recommendations.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 3-–≥–æ —É—Ä–æ–≤–Ω—è - —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –≥–ª—É–±–∏–Ω—É —Å–µ—Ç–∏');
      }
    }
    
    if (recommendations.length === 0) {
      recommendations.push('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
    }
    
    return {
      summary,
      recommendations
    };
  }
  
  private async checkReferralIntegrity() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
    const issues = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
      const usersWithReferrals = await db
        .select({
          id: users.id,
          name: users.first_name,
          referralCodeUsed: users.applied_referral_code
        })
        .from(users);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ telegram_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const allTelegramIds = await db
        .select({ telegram_id: users.telegram_id })
        .from(users);
      
      const telegramIdSet = new Set(allTelegramIds.map(u => u.telegram_id?.toString()));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const user of usersWithReferrals) {
        if (user.referralCodeUsed && !telegramIdSet.has(user.referralCodeUsed)) {
          issues.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${user.referralCodeUsed}`);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      issues.push('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π',
      passed: issues.length === 0,
      issues,
      score: issues.length === 0 ? 100 : Math.max(0, 100 - issues.length * 20)
    };
  }
  
  private async checkBonusIntegrity() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    const issues = [];
    
    const pendingBonuses = await db.select().from(userCashbacks)
      .where(eq(userCashbacks.status, 'pending'));
    
    const oldPendingBonuses = pendingBonuses.filter(bonus => {
      const createdDate = new Date(bonus.created_at);
      const daysDiff = (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24);
      return daysDiff > 7; // –ë–æ–Ω—É—Å—ã –≤–∏—Å—è—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
    });
    
    if (oldPendingBonuses.length > 0) {
      issues.push(`${oldPendingBonuses.length} –±–æ–Ω—É—Å–æ–≤ –æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π`);
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤',
      passed: issues.length === 0,
      issues,
      score: issues.length === 0 ? 100 : Math.max(0, 100 - issues.length * 15)
    };
  }
  
  private async checkSystemErrors() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
    const issues = [];
    
    const recentErrors = await db.select().from(aiLogs)
      .where(eq(aiLogs.level, 'error'))
      .orderBy(desc(aiLogs.created_at))
      .limit(10);
    
    if (recentErrors.length > 5) {
      issues.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${recentErrors.length} –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è`);
    }
    
    return {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫',
      passed: issues.length === 0,
      issues,
      score: issues.length === 0 ? 100 : Math.max(0, 100 - issues.length * 10)
    };
  }
  
  private async checkDatabasePerformance() {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
    const issues = [];
    const startTime = Date.now();
    
    try {
      await db.select().from(users).limit(1);
      const queryTime = Date.now() - startTime;
      
      if (queryTime > 1000) {
        issues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${queryTime}–º—Å`);
      }
    } catch (error) {
      issues.push('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    return {
      name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      passed: issues.length === 0,
      issues,
      score: issues.length === 0 ? 100 : 50
    };
  }
  
  private async generateHealthRecommendations(healthChecks: any[]) {
    const recommendations = [];
    
    healthChecks.forEach(check => {
      if (!check.passed) {
        switch (check.name) {
          case '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π':
            recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏');
            break;
          case '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–æ–Ω—É—Å–æ–≤':
            recommendations.push('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –±–æ–Ω—É—Å—ã');
            break;
          case '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫':
            recommendations.push('–†–∞–∑–æ–±—Ä–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏');
            break;
          case '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö':
            recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            break;
        }
      }
    });
    
    if (recommendations.length === 0) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    }
    
    return recommendations;
  }
  
  private async createErrorTask(type: string, error: any, context?: any) {
    try {
      await db.insert(aiTasks).values({
        type: 'error_fix',
        title: `–û—à–∏–±–∫–∞: ${type}`,
        description: error.message || String(error),
        priority: 'high',
        status: 'pending',
        error_data: {
          error: error.message || String(error),
          stack: error.stack,
          timestamp: new Date().toISOString()
        },
        context: context || {},
        ai_analysis: {
          errorType: type,
          autoGenerated: true,
          needsAttention: true
        }
      });
      
      console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${type}`);
    } catch (taskError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskError);
    }
  }
  
  private async logOperation(level: string, message: string, context?: any) {
    try {
      await db.insert(aiLogs).values({
        level,
        message,
        context: context || {}
      });
    } catch (logError) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', logError);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò –∞–≥–µ–Ω—Ç–∞
const aiAgent = new AIReferralAgent();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
export const notifyNewReferral = async (newUser: any) => {
  return aiAgent.notifyReferralChain(newUser);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
export const calculateBonusesInternal = async (orderId: number) => {
  return aiAgent.calculateAndDistributeBonuses(orderId);
};

// API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
export const buildReferralNetwork = async (req: Request, res: Response) => {
  try {
    const networkData = await aiAgent.analyzeReferralNetwork();
    
    res.json({
      success: true,
      network: networkData
    });
  } catch (error) {
    console.error('Network analysis error:', error);
    res.status(500).json({
      error: 'Failed to build referral network',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

export const calculateBonusesAPI = async (req: Request, res: Response) => {
  try {
    console.log('=== API ENDPOINT: calculateBonusesAPI –≤—ã–∑–≤–∞–Ω ===');
    const { orderId } = req.body;
    console.log('–ü–æ–ª—É—á–µ–Ω orderId:', orderId);
    
    if (!orderId) {
      return res.status(400).json({
        error: 'Order ID is required'
      });
    }
    
    console.log('–í—ã–∑—ã–≤–∞–µ–º aiAgent.calculateAndDistributeBonuses —Å orderId:', orderId);
    const result = await aiAgent.calculateAndDistributeBonuses(orderId);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç aiAgent:', result);
    
    res.json({
      success: true,
      result
    });
  } catch (error) {
    console.error('Bonus calculation error:', error);
    res.status(500).json({
      error: 'Failed to calculate bonuses',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

export const getSystemHealthReport = async (req: Request, res: Response) => {
  try {
    const healthReport = await aiAgent.monitorSystemHealth();
    
    res.json({
      success: true,
      health_score: healthReport.score,
      analysis: {
        status: healthReport.status,
        recommendations: healthReport.recommendations,
        checks: healthReport.checks
      },
      metrics: {
        score: healthReport.score,
        status: healthReport.status,
        checksCount: healthReport.checks.length,
        issuesCount: healthReport.checks.filter(c => !c.passed).length
      }
    });
  } catch (error) {
    console.error('Health report error:', error);
    res.status(500).json({
      error: 'Failed to generate health report',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

export const getErrorLogs = async (req: Request, res: Response) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–¥–∞—á–∏
    const errorLogs = await db.select().from(aiLogs)
      .where(eq(aiLogs.level, 'error'))
      .orderBy(desc(aiLogs.created_at))
      .limit(20);
    
    const errorTasks = await db.select().from(aiTasks)
      .where(eq(aiTasks.type, 'error_fix'))
      .orderBy(desc(aiTasks.created_at))
      .limit(10);
    
    const formattedErrors = errorTasks.map(task => ({
      id: task.id,
      type: 'system_error',
      message: task.description,
      severity: task.priority === 'critical' ? 'critical' : 
                task.priority === 'high' ? 'high' : 
                task.priority === 'medium' ? 'medium' : 'low',
      resolved: task.status === 'completed',
      created_at: task.created_at
    }));
    
    res.json({
      success: true,
      errors: formattedErrors,
      analysis: {
        totalErrors: formattedErrors.length,
        resolvedErrors: formattedErrors.filter(e => e.resolved).length,
        criticalErrors: formattedErrors.filter(e => e.severity === 'critical').length
      }
    });
  } catch (error) {
    console.error('Error logs retrieval error:', error);
    res.status(500).json({
      error: 'Failed to get error logs',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};