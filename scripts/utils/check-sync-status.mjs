#!/usr/bin/env node

import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import { sql } from "drizzle-orm";

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL environment variable is required');
  process.exit(1);
}

const client = neon(connectionString);
const db = drizzle(client);

async function checkSyncStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å GitHub...\n');

  const results = {
    users: false,
    mlm_levels: false,
    preferences: false,
    issues: []
  };

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ú–æ—è —Å–µ—Ç—å" (users)');
    try {
      const usersCount = await db.execute(sql`SELECT COUNT(*) FROM users`);
      const count = usersCount[0]?.count || 0;
      console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`);
      results.users = count > 0;
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      results.issues.push('–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã mlm_levels —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ "MLM –£—Ä–æ–≤–Ω–∏" (mlm_levels)');
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const levelsCount = await db.execute(sql`SELECT COUNT(*) FROM mlm_levels`);
      const count = levelsCount[0]?.count || 0;
      console.log(`   ‚úÖ MLM —É—Ä–æ–≤–Ω–µ–π: ${count}`);

      // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
      try {
        const testNewFields = await db.execute(sql`
          SELECT required_personal_volume, required_group_volume 
          FROM mlm_levels 
          LIMIT 1
        `);
        console.log('   ‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä–µ–º–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
        results.mlm_levels = true;
      } catch (fieldError) {
        console.log('   ‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä–µ–º–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        results.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è required_personal_volume –∏ required_group_volume');
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      results.issues.push('–¢–∞–±–ª–∏—Ü–∞ mlm_levels –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã user_bonus_preferences
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ "–°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞" (user_bonus_preferences)');
    try {
      const preferencesCount = await db.execute(sql`SELECT COUNT(*) FROM user_bonus_preferences`);
      const count = preferencesCount[0]?.count || 0;
      console.log(`   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–æ–≤: ${count}`);
      results.preferences = count >= 0; // >= 0 –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      results.issues.push('–¢–∞–±–ª–∏—Ü–∞ user_bonus_preferences –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.log(`   üìã –ú–æ—è —Å–µ—Ç—å: ${results.users ? '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
    console.log(`   üìã MLM –£—Ä–æ–≤–Ω–∏: ${results.mlm_levels ? '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
    console.log(`   üìã –°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞: ${results.preferences ? '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);

    if (results.issues.length > 0) {
      console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      results.issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
      
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
      if (results.issues.some(issue => issue.includes('required_personal_volume'))) {
        console.log('   üîß –ó–∞–ø—É—Å—Ç–∏—Ç—å: node migrate-mlm-volume-fields.mjs');
      }
      if (results.issues.some(issue => issue.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'))) {
        console.log('   üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log('   üîß –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
      }
      return false;
    }

    console.log('\nüéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å GitHub!');
    return true;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkSyncStatus()
  .then((success) => {
    process.exit(success ? 0 : 1);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });