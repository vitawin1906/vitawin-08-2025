#!/usr/bin/env node

// –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –∞–¥–º–∏–Ω–æ–≤
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function finalAdminFix() {
  console.log('\nüîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í\n');
  
  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('üìä 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        ALTER TABLE admin_users ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;
        ALTER TABLE admin_users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
      "`
    );

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('üìã 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:');
    const { stdout: structure } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "\\d admin_users"`
    );
    console.log(structure);

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('\nüìä 3. –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:');
    const { stdout: currentAdmins } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, is_active, created_at, LEFT(password_hash, 20) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(currentAdmins);

    // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    console.log('üóëÔ∏è 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        DELETE FROM admin_activity_log;
        DELETE FROM admin_sessions;
        DELETE FROM admin_users;
      "`
    );

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ bcrypt —Ö–µ—à–∏
    console.log('üîë 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è bcrypt —Ö–µ—à–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    const { stdout: hashGeneration } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        
        async function generateAndTestHashes() {
          try {
            console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–µ–π...');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏ —Å 10 —Ä–∞—É–Ω–¥–∞–º–∏ (–∫–∞–∫ –≤ adminAuthController)
            const hash1 = await bcrypt.hash('VitawinAdmin2025!', 10);
            const hash2 = await bcrypt.hash('admin123', 10);
            
            console.log('Generated hashes:');
            console.log('ADMIN_HASH=' + hash1);
            console.log('DOROSH_HASH=' + hash2);
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
            const test1 = await bcrypt.compare('VitawinAdmin2025!', hash1);
            const test2 = await bcrypt.compare('admin123', hash2);
            
            console.log('Validation tests:');
            console.log('ADMIN_TEST=' + test1);
            console.log('DOROSH_TEST=' + test2);
            
            if (!test1 || !test2) {
              throw new Error('Hash validation failed!');
            }
            
            console.log('All hashes validated successfully!');
            
          } catch (error) {
            console.error('Hash generation error:', error.message);
            process.exit(1);
          }
        }
        
        generateAndTestHashes();
      "`
    );

    console.log(hashGeneration);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à–∏
    const lines = hashGeneration.split('\n').filter(line => line.trim());
    const adminHash = lines.find(line => line.startsWith('ADMIN_HASH=')).replace('ADMIN_HASH=', '');
    const doroshHash = lines.find(line => line.startsWith('DOROSH_HASH=')).replace('DOROSH_HASH=', '');
    const adminTest = lines.find(line => line.startsWith('ADMIN_TEST=')).replace('ADMIN_TEST=', '');
    const doroshTest = lines.find(line => line.startsWith('DOROSH_TEST=')).replace('DOROSH_TEST=', '');

    if (adminTest !== 'true' || doroshTest !== 'true') {
      throw new Error('–•–µ—à–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
    }

    // 6. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ö–µ—à–∞–º–∏
    console.log('\nüë§ 6. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤...');
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        INSERT INTO admin_users (email, password_hash, is_active, created_at, updated_at, last_login) VALUES 
        ('admin@vitawins.ru', '${adminHash}', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL),
        ('dorosh21@gmail.com', '${doroshHash}', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL);
      "`
    );

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    console.log('\n‚úÖ 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤:');
    const { stdout: newAdmins } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT id, email, is_active, created_at, LEFT(password_hash, 25) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(newAdmins);

    // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüß™ 8. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ë–î...');
    const { stdout: authTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function testAuth() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            console.log('Testing admin@vitawins.ru...');
            const result1 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['admin@vitawins.ru']);
            
            if (result1.rows.length === 0) {
              console.log('ERROR: admin@vitawins.ru not found!');
            } else {
              const admin = result1.rows[0];
              console.log('Found admin:', admin.email);
              console.log('Hash starts with:', admin.password_hash.substring(0, 15));
              
              const isValid = await bcrypt.compare('VitawinAdmin2025!', admin.password_hash);
              console.log('Password validation: ' + (isValid ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            }
            
            console.log('\\nTesting dorosh21@gmail.com...');
            const result2 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['dorosh21@gmail.com']);
            
            if (result2.rows.length === 0) {
              console.log('ERROR: dorosh21@gmail.com not found!');
            } else {
              const admin2 = result2.rows[0];
              console.log('Found admin:', admin2.email);
              console.log('Hash starts with:', admin2.password_hash.substring(0, 15));
              
              const isValid2 = await bcrypt.compare('admin123', admin2.password_hash);
              console.log('Password validation: ' + (isValid2 ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            }
            
          } catch (error) {
            console.error('Auth test error:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        testAuth();
      "`
    );

    console.log(authTest);

    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:');
    console.log('‚Ä¢ Email: admin@vitawins.ru');
    console.log('‚Ä¢ –ü–∞—Ä–æ–ª—å: VitawinAdmin2025!');
    console.log('');
    console.log('‚Ä¢ Email: dorosh21@gmail.com');
    console.log('‚Ä¢ –ü–∞—Ä–æ–ª—å: admin123');
    console.log('\nüåê URL –∞–¥–º–∏–Ω–∫–∏: https://vitawins.ru/admin');
    console.log('\n‚úÖ –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ SUCCESS, —Ç–æ –≤—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

finalAdminFix();