#!/usr/bin/env node

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º $ –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function fixSQLEscaping() {
  console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú SQL\n');
  
  try {
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏
    console.log('üîë 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö bcrypt —Ö–µ—à–µ–π...');
    const { stdout: hashGeneration } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        
        async function generateHashes() {
          try {
            const hash1 = await bcrypt.hash('VitawinAdmin2025!', 10);
            const hash2 = await bcrypt.hash('admin123', 10);
            
            console.log('ADMIN_HASH=' + hash1);
            console.log('DOROSH_HASH=' + hash2);
            
            const test1 = await bcrypt.compare('VitawinAdmin2025!', hash1);
            const test2 = await bcrypt.compare('admin123', hash2);
            
            console.log('ADMIN_TEST=' + test1);
            console.log('DOROSH_TEST=' + test2);
            
          } catch (error) {
            console.error('Error:', error.message);
          }
        }
        
        generateHashes();
      "`
    );

    console.log(hashGeneration);

    const lines = hashGeneration.split('\n').filter(line => line.trim());
    const adminHash = lines.find(line => line.startsWith('ADMIN_HASH=')).replace('ADMIN_HASH=', '');
    const doroshHash = lines.find(line => line.startsWith('DOROSH_HASH=')).replace('DOROSH_HASH=', '');

    console.log('Admin hash:', adminHash);
    console.log('Dorosh hash:', doroshHash);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Node.js
    console.log('\nüíæ 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    const { stdout: updateResult } = await execAsync(
      `docker exec vitawin_app node -e "
        const { Pool } = require('pg');
        
        async function updateHashes() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            // –û–±–Ω–æ–≤–ª—è–µ–º admin@vitawins.ru
            const result1 = await pool.query(
              'UPDATE admin_users SET password_hash = \\$1, updated_at = CURRENT_TIMESTAMP WHERE email = \\$2',
              ['${adminHash}', 'admin@vitawins.ru']
            );
            console.log('Admin update result:', result1.rowCount, 'rows affected');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º dorosh21@gmail.com
            const result2 = await pool.query(
              'UPDATE admin_users SET password_hash = \\$1, updated_at = CURRENT_TIMESTAMP WHERE email = \\$2',
              ['${doroshHash}', 'dorosh21@gmail.com']
            );
            console.log('Dorosh update result:', result2.rowCount, 'rows affected');
            
          } catch (error) {
            console.error('Update error:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        updateHashes();
      "`
    );

    console.log(updateResult);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ö–µ—à–∏
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ö–µ—à–µ–π:');
    const { stdout: savedHashes } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT email, LENGTH(password_hash) as hash_length, LEFT(password_hash, 10) || '...' as hash_preview FROM admin_users ORDER BY id;"`
    );
    console.log(savedHashes);

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüß™ 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const { stdout: authTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function testAuth() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin@vitawins.ru...');
            const result1 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['admin@vitawins.ru']);
            
            if (result1.rows.length > 0) {
              const admin = result1.rows[0];
              console.log('–•–µ—à –¥–ª–∏–Ω–∞:', admin.password_hash.length);
              console.log('–•–µ—à –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', admin.password_hash.substring(0, 10));
              
              const isValid = await bcrypt.compare('VitawinAdmin2025!', admin.password_hash);
              console.log('admin@vitawins.ru + VitawinAdmin2025!: ' + (isValid ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            } else {
              console.log('admin@vitawins.ru: NOT FOUND ‚ùå');
            }
            
            console.log('\\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dorosh21@gmail.com...');
            const result2 = await pool.query('SELECT email, password_hash FROM admin_users WHERE email = \\$1', ['dorosh21@gmail.com']);
            
            if (result2.rows.length > 0) {
              const admin2 = result2.rows[0];
              console.log('–•–µ—à –¥–ª–∏–Ω–∞:', admin2.password_hash.length);
              console.log('–•–µ—à –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', admin2.password_hash.substring(0, 10));
              
              const isValid2 = await bcrypt.compare('admin123', admin2.password_hash);
              console.log('dorosh21@gmail.com + admin123: ' + (isValid2 ? 'SUCCESS ‚úÖ' : 'FAILED ‚ùå'));
            } else {
              console.log('dorosh21@gmail.com: NOT FOUND ‚ùå');
            }
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        testAuth();
      "`
    );

    console.log(authTest);

    console.log('\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\n–ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã $ –≤ bcrypt —Ö–µ—à–∞—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ SQL.');
    console.log('–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π.');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('‚Ä¢ admin@vitawins.ru: VitawinAdmin2025!');
    console.log('‚Ä¢ dorosh21@gmail.com: admin123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

fixSQLEscaping();