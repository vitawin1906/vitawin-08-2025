#!/usr/bin/env node

import { exec } from 'child_process';
import crypto from 'crypto';
import bcrypt from 'bcrypt';
import readline from 'readline';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Docker
const DOCKER_CONFIG = {
  container: 'vitawin_postgres',
  database: 'vitawin',
  user: 'vitawin_user',
  password: 'vitawin_secure_password_2025'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const ENCRYPTION_CONFIG = {
  algorithm: 'aes-256-gcm',
  keyLength: 32,
  ivLength: 16,
  tagLength: 16
};

class AdminCLI {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  generateEncryptionKey() {
    return crypto.randomBytes(ENCRYPTION_CONFIG.keyLength).toString('hex');
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  encryptPassword(password, key) {
    const iv = crypto.randomBytes(ENCRYPTION_CONFIG.ivLength);
    const cipher = crypto.createCipheriv(ENCRYPTION_CONFIG.algorithm, Buffer.from(key, 'hex'), iv);
    
    let encrypted = cipher.update(password, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    const authTag = cipher.getAuthTag();
    
    return {
      encrypted: encrypted,
      iv: iv.toString('hex'),
      authTag: authTag.toString('hex')
    };
  }

  // –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  decryptPassword(encryptedData, key) {
    try {
      const decipher = crypto.createDecipheriv(
        ENCRYPTION_CONFIG.algorithm, 
        Buffer.from(key, 'hex'), 
        Buffer.from(encryptedData.iv, 'hex')
      );
      decipher.setAuthTag(Buffer.from(encryptedData.authTag, 'hex'));
      
      let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
      
      return decrypted;
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Docker
  async executeSQL(query) {
    return new Promise((resolve, reject) => {
      const dockerCommand = `docker exec -i ${DOCKER_CONFIG.container} psql -U ${DOCKER_CONFIG.user} -d ${DOCKER_CONFIG.database} -c "${query}"`;
      
      exec(dockerCommand, (error, stdout, stderr) => {
        if (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: ${error.message}`));
          return;
        }
        if (stderr && !stderr.includes('NOTICE')) {
          reject(new Error(`SQL –æ—à–∏–±–∫–∞: ${stderr}`));
          return;
        }
        resolve(stdout);
      });
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async checkAdminExists() {
    try {
      const result = await this.executeSQL("SELECT COUNT(*) FROM admin_users;");
      const count = parseInt(result.split('\n')[2].trim());
      return count > 0;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async getAdminData() {
    try {
      const result = await this.executeSQL("SELECT id, email, password_hash, created_at, last_login FROM admin_users ORDER BY id LIMIT 1;");
      const lines = result.split('\n');
      
      if (lines.length < 4) {
        return null;
      }
      
      const dataLine = lines[2].trim();
      if (!dataLine || dataLine === '(0 rows)') {
        return null;
      }
      
      const parts = dataLine.split('|').map(p => p.trim());
      return {
        id: parts[0],
        email: parts[1],
        password_hash: parts[2],
        created_at: parts[3],
        last_login: parts[4] || '–ù–∏–∫–æ–≥–¥–∞'
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async createAdminUser(email, password) {
    try {
      const saltRounds = 12;
      const passwordHash = await bcrypt.hash(password, saltRounds);
      
      const query = `INSERT INTO admin_users (email, password_hash, created_at) VALUES ('${email}', '${passwordHash}', NOW());`;
      await this.executeSQL(query);
      
      return true;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: ${error.message}`);
    }
  }

  // –°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async resetDatabase() {
    try {
      console.log('üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
      const dropTablesQuery = `
        DROP SCHEMA public CASCADE;
        CREATE SCHEMA public;
        GRANT ALL ON SCHEMA public TO ${DOCKER_CONFIG.user};
        GRANT ALL ON SCHEMA public TO public;
      `;
      
      await this.executeSQL(dropTablesQuery);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∑–∞–Ω–æ–≤–æ
      const createTablesQuery = `
        -- Admin users table
        CREATE TABLE admin_users (
          id SERIAL PRIMARY KEY,
          email TEXT NOT NULL UNIQUE,
          password_hash TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT NOW() NOT NULL,
          last_login TIMESTAMP
        );
        
        -- Users table  
        CREATE TABLE users (
          id SERIAL PRIMARY KEY,
          telegram_id BIGINT NOT NULL UNIQUE,
          first_name TEXT NOT NULL,
          username TEXT,
          referral_code TEXT NOT NULL UNIQUE,
          referrer_id INTEGER,
          applied_referral_code TEXT,
          balance DECIMAL(10,2) DEFAULT 0.00,
          bonus_coins DECIMAL(10,2) DEFAULT 0.00,
          referral_rewards DECIMAL(10,2) DEFAULT 0.00,
          total_pv INTEGER DEFAULT 0,
          is_admin BOOLEAN DEFAULT false,
          created_at TIMESTAMP DEFAULT NOW() NOT NULL,
          last_login TIMESTAMP
        );
        
        -- Products table
        CREATE TABLE products (
          id SERIAL PRIMARY KEY,
          name TEXT NOT NULL,
          description TEXT,
          price DECIMAL(10,2) NOT NULL,
          original_price DECIMAL(10,2),
          category TEXT,
          images TEXT[],
          is_active BOOLEAN DEFAULT true,
          stock INTEGER DEFAULT 0,
          slug TEXT UNIQUE,
          pv INTEGER DEFAULT 0,
          custom_pv INTEGER,
          custom_cashback DECIMAL(5,2),
          created_at TIMESTAMP DEFAULT NOW() NOT NULL,
          updated_at TIMESTAMP DEFAULT NOW() NOT NULL
        );
        
        -- Admin sessions table
        CREATE TABLE admin_sessions (
          id SERIAL PRIMARY KEY,
          admin_id INTEGER NOT NULL REFERENCES admin_users(id),
          token TEXT NOT NULL UNIQUE,
          expires_at TIMESTAMP NOT NULL,
          created_at TIMESTAMP DEFAULT NOW() NOT NULL
        );
        
        -- Foreign keys
        ALTER TABLE users ADD CONSTRAINT users_referrer_id_fkey 
          FOREIGN KEY (referrer_id) REFERENCES users(id);
      `;
      
      await this.executeSQL(createTablesQuery);
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
      
      return true;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: ${error.message}`);
    }
  }

  // –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async ask(question) {
    return new Promise((resolve) => {
      this.rl.question(question, (answer) => {
        resolve(answer);
      });
    });
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async showMenu() {
    console.log('\nüîß VitaWin Admin CLI');
    console.log('==================');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞');
    console.log('3. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    console.log('4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    console.log('5. –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('6. –í—ã—Ö–æ–¥');
    console.log('==================');
  }

  // –ó–∞–ø—É—Å–∫ CLI
  async run() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ VitaWin Admin CLI...');
      
      while (true) {
        await this.showMenu();
        const choice = await this.ask('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ');
        
        switch (choice.trim()) {
          case '1':
            await this.handleCheckAdmin();
            break;
          case '2':
            await this.handleCreateAdmin();
            break;
          case '3':
            await this.handleShowEncrypted();
            break;
          case '4':
            await this.handleDecryptPassword();
            break;
          case '5':
            await this.handleResetDatabase();
            break;
          case '6':
            console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
            this.rl.close();
            return;
          default:
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      }
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      this.rl.close();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
  async handleCheckAdmin() {
    try {
      const adminExists = await this.checkAdminExists();
      
      if (adminExists) {
        const adminData = await this.getAdminData();
        console.log('\n‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:');
        console.log(`üìß Email: ${adminData.email}`);
        console.log(`üîë Password Hash: ${adminData.password_hash.substring(0, 20)}...`);
        console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${adminData.created_at}`);
        console.log(`üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${adminData.last_login}`);
      } else {
        console.log('\n‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
  async handleCreateAdmin() {
    try {
      const adminExists = await this.checkAdminExists();
      
      if (adminExists) {
        const overwrite = await this.ask('‚ö†Ô∏è  –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ');
        if (overwrite.toLowerCase() !== 'y') {
          console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
          return;
        }
        
        await this.executeSQL('DELETE FROM admin_sessions;');
        await this.executeSQL('DELETE FROM admin_users;');
      }
      
      const email = await this.ask('üìß –í–≤–µ–¥–∏—Ç–µ email –∞–¥–º–∏–Ω–∞: ');
      const password = await this.ask('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
      
      await this.createAdminUser(email, password);
      
      console.log('\n‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      console.log(`üìß Email: ${email}`);
      console.log('üîë –ü–∞—Ä–æ–ª—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
  async handleShowEncrypted() {
    try {
      const password = await this.ask('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ');
      const key = await this.ask('üîê –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ');
      
      const encryptionKey = key.trim() || this.generateEncryptionKey();
      const encrypted = this.encryptPassword(password, encryptionKey);
      
      console.log('\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
      console.log(`üîë –ö–ª—é—á: ${encryptionKey}`);
      console.log(`üì¶ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${encrypted.encrypted}`);
      console.log(`üéØ IV: ${encrypted.iv}`);
      console.log(`üè∑Ô∏è  Auth Tag: ${encrypted.authTag}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
  async handleDecryptPassword() {
    try {
      const encrypted = await this.ask('üì¶ –í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ');
      const iv = await this.ask('üéØ –í–≤–µ–¥–∏—Ç–µ IV: ');
      const authTag = await this.ask('üè∑Ô∏è  –í–≤–µ–¥–∏—Ç–µ Auth Tag: ');
      const key = await this.ask('üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ');
      
      const encryptedData = {
        encrypted: encrypted,
        iv: iv,
        authTag: authTag
      };
      
      const decrypted = this.decryptPassword(encryptedData, key);
      
      console.log('\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', decrypted);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –ë–î
  async handleResetDatabase() {
    try {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!');
      const confirm1 = await this.ask('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ "RESET" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');
      
      if (confirm1 !== 'RESET') {
        console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      }
      
      const confirm2 = await this.ask('üî• –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ "YES" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ');
      
      if (confirm2 !== 'YES') {
        console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      }
      
      await this.resetDatabase();
      
      console.log('\nüîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
      console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ CLI –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (import.meta.url === `file://${process.argv[1]}`) {
  const cli = new AdminCLI();
  cli.run().catch(console.error);
}

export default AdminCLI;