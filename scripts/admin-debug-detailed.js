#!/usr/bin/env node

// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö–µ—à–∞–º–∏
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function detailedDebug() {
  console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –•–ï–®–ï–ô\n');
  
  try {
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ö–µ—à–∏ –∏–∑ –ë–î
    console.log('üìä 1. –ü–æ–ª–Ω—ã–µ —Ö–µ—à–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const { stdout: fullHashes } = await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "SELECT email, password_hash FROM admin_users ORDER BY id;"`
    );
    console.log(fullHashes);

    // 2. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à–∞
    console.log('\nüß™ 2. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–µ–π...');
    const { stdout: detailedTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function detailedTest() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            const result = await pool.query('SELECT email, password_hash FROM admin_users ORDER BY id');
            
            for (const admin of result.rows) {
              console.log('\\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:', admin.email, '===');
              console.log('–•–µ—à –∏–∑ –ë–î:', admin.password_hash);
              console.log('–î–ª–∏–Ω–∞ —Ö–µ—à–∞:', admin.password_hash.length);
              console.log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', admin.password_hash.substring(0, 10));
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              const testPassword = admin.email === 'admin@vitawins.ru' ? 'VitawinAdmin2025!' : 'admin123';
              console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å:', testPassword);
              
              try {
                const isValid = await bcrypt.compare(testPassword, admin.password_hash);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt.compare:', isValid);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                const newHash = await bcrypt.hash(testPassword, 10);
                console.log('–ù–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', newHash.substring(0, 30) + '...');
                const newTest = await bcrypt.compare(testPassword, newHash);
                console.log('–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞:', newTest);
                
              } catch (error) {
                console.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏:', error.message);
              }
            }
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        detailedTest();
      "`
    );
    console.log(detailedTest);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π
    console.log('\nüíæ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à
    const { stdout: testHash } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        
        async function generateTestHash() {
          const testPassword = 'testpass123';
          const hash = await bcrypt.hash(testPassword, 10);
          console.log('TEST_PASSWORD=' + testPassword);
          console.log('TEST_HASH=' + hash);
          
          const validation = await bcrypt.compare(testPassword, hash);
          console.log('TEST_VALIDATION=' + validation);
        }
        
        generateTestHash();
      "`
    );
    console.log(testHash);

    const lines = testHash.split('\n').filter(line => line.trim());
    const testPassword = lines.find(line => line.startsWith('TEST_PASSWORD=')).replace('TEST_PASSWORD=', '');
    const testHashValue = lines.find(line => line.startsWith('TEST_HASH=')).replace('TEST_HASH=', '');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à –≤ –ë–î
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "
        INSERT INTO admin_users (email, password_hash, is_active, created_at, updated_at) 
        VALUES ('test@example.com', '${testHashValue}', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
      "`
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    const { stdout: retrievalTest } = await execAsync(
      `docker exec vitawin_app node -e "
        const bcrypt = require('bcrypt');
        const { Pool } = require('pg');
        
        async function testRetrieval() {
          const pool = new Pool({
            connectionString: process.env.DATABASE_URL
          });
          
          try {
            const result = await pool.query('SELECT password_hash FROM admin_users WHERE email = \\$1', ['test@example.com']);
            
            if (result.rows.length > 0) {
              const retrievedHash = result.rows[0].password_hash;
              console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ö–µ—à:', retrievedHash);
              console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö–µ—à:', '${testHashValue}');
              console.log('–•–µ—à–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã:', retrievedHash === '${testHashValue}');
              
              const validation = await bcrypt.compare('${testPassword}', retrievedHash);
              console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ö–µ—à–∞:', validation);
            }
            
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', error.message);
          } finally {
            await pool.end();
          }
        }
        
        testRetrieval();
      "`
    );
    console.log(retrievalTest);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    await execAsync(
      `docker exec -i vitawin_postgres psql -U vitawin_user -d vitawin -c "DELETE FROM admin_users WHERE email = 'test@example.com';"`
    );

    console.log('\nüí° –ê–ù–ê–õ–ò–ó:');
    console.log('–ï—Å–ª–∏ —Ö–µ—à–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è FAILED,');
    console.log('—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
    console.log('1. –ö–æ–¥–∏—Ä–æ–≤–∫–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–∞—Ä–æ–ª–µ');
    console.log('2. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –≤–µ—Ä—Å–∏–π bcrypt');
    console.log('3. –ü—Ä–æ–±–ª–µ–º–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
}

detailedDebug();