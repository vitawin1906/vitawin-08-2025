import { db } from '../storage';
import { storage } from '../storage';
import { orders, users, referrals, referralTransactionLog, orderProcessingLog } from '@shared/schema';
import { eq, and } from 'drizzle-orm';
import { nanoid } from 'nanoid';
import { telegramNotificationService } from './telegramNotificationService';

export class ReferralTransactionService {
  
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  async processOrderPayment(orderId: number): Promise<void> {
    const transactionId = `tx_${nanoid(12)}`;
    
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await this.logOrderProcessing(orderId, 'payment_confirmed', 'started', {
        transaction_id: transactionId,
        timestamp: new Date().toISOString()
      });

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
      if (!order.length) {
        throw new Error(`Order ${orderId} not found`);
      }

      const orderData = order[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      if (orderData.payment_status !== 'paid') {
        await this.logOrderProcessing(orderId, 'payment_check', 'skipped', {
          reason: 'Order not paid',
          payment_status: orderData.payment_status
        });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const buyer = await db.select().from(users).where(eq(users.id, orderData.user_id)).limit(1);
      if (!buyer.length || !buyer[0].referrer_id) {
        await this.logOrderProcessing(orderId, 'referrer_check', 'no_referrer', {
          buyer_id: orderData.user_id,
          has_referrer: false
        });
        return;
      }

      const buyerData = buyer[0];

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      const referralSettings = await storage.getReferralSettings();
      if (!referralSettings) {
        throw new Error('Referral settings not configured');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å—ã –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏
      await this.calculateAndDistributeReferralBonuses(
        transactionId,
        orderData,
        buyerData,
        referralSettings
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await this.logOrderProcessing(orderId, 'bonus_distribution', 'completed', {
        transaction_id: transactionId,
        total_amount: orderData.total
      });

    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await this.logOrderProcessing(orderId, 'error', 'failed', {
        transaction_id: transactionId,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      
      console.error(`‚ùå Error processing order ${orderId}:`, error);
      throw error;
    }
  }

  // –†–∞—Å—á–µ—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
  private async calculateAndDistributeReferralBonuses(
    transactionId: string,
    orderData: any,
    buyerData: any,
    referralSettings: any
  ): Promise<void> {
    const orderTotal = parseFloat(orderData.total);
    const commissionRates = [
      { level: 1, rate: parseFloat(referralSettings.level1_commission) / 100 },
      { level: 2, rate: parseFloat(referralSettings.level2_commission) / 100 },
      { level: 3, rate: parseFloat(referralSettings.level3_commission) / 100 },
    ];

    let currentReferrerId = buyerData.referrer_id;

    for (const { level, rate } of commissionRates) {
      if (!currentReferrerId) break;

      const referrer = await db.select().from(users).where(eq(users.id, currentReferrerId)).limit(1);
      if (!referrer.length) break;

      const referrerData = referrer[0];
      const bonusAmount = orderTotal * rate;

      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const logId = await this.logReferralTransaction({
        transaction_id: `${transactionId}_L${level}`,
        order_id: orderData.id,
        buyer_id: buyerData.id,
        referrer_id: currentReferrerId,
        referral_level: level,
        commission_rate: (rate * 100).toFixed(2),
        order_amount: orderTotal.toFixed(2),
        bonus_amount: bonusAmount.toFixed(2),
        status: 'processing',
        metadata: {
          buyer_name: buyerData.first_name,
          referrer_name: referrerData.first_name,
          referrer_telegram_id: referrerData.telegram_id,
          commission_percentage: rate * 100
        }
      });

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
        await db.insert(referrals).values({
          user_id: buyerData.id,
          referrer_id: currentReferrerId,
          order_id: orderData.id,
          referral_level: level,
          commission_rate: (rate * 100).toFixed(2),
          reward_earned: bonusAmount.toFixed(2),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try {
          await telegramNotificationService.sendBonusNotification(
            currentReferrerId,
            bonusAmount,
            buyerData.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            level
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          await this.updateTransactionLog(logId, {
            telegram_notification_sent: true,
            status: 'completed',
            processed_at: new Date()
          });

          console.log(`‚úÖ Bonus ${bonusAmount.toFixed(2)}‚ÇΩ processed for ${referrerData.first_name} (Level ${level})`);

        } catch (notificationError) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ - –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await this.updateTransactionLog(logId, {
            telegram_notification_sent: false,
            telegram_notification_error: notificationError instanceof Error ? notificationError.message : 'Unknown notification error',
            status: 'notification_failed',
            processed_at: new Date()
          });

          console.error(`‚ùå Notification failed for ${referrerData.first_name}:`, notificationError);
        }

      } catch (bonusError) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ - –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–∞
        await this.updateTransactionLog(logId, {
          status: 'failed',
          processed_at: new Date(),
          metadata: {
            ...logId,
            error: bonusError instanceof Error ? bonusError.message : 'Unknown bonus error'
          }
        });

        console.error(`‚ùå Bonus creation failed for ${referrerData.first_name}:`, bonusError);
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
      currentReferrerId = referrerData.referrer_id;
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  private async logReferralTransaction(data: any): Promise<number> {
    const result = await db.insert(referralTransactionLog).values(data).returning({ id: referralTransactionLog.id });
    return result[0].id;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  private async updateTransactionLog(id: number, updates: any): Promise<void> {
    await db.update(referralTransactionLog)
      .set(updates)
      .where(eq(referralTransactionLog.id, id));
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
  private async logOrderProcessing(orderId: number, stage: string, status: string, details: any = {}): Promise<void> {
    await db.insert(orderProcessingLog).values({
      order_id: orderId,
      processing_stage: stage,
      status: status,
      details: details
    });
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async recoverFailedTransactions(orderId?: number): Promise<void> {
    try {
      const failedTransactions = await db.select()
        .from(referralTransactionLog)
        .where(
          and(
            eq(referralTransactionLog.status, 'failed'),
            orderId ? eq(referralTransactionLog.order_id, orderId) : undefined
          )
        );

      console.log(`üîÑ Found ${failedTransactions.length} failed transactions to recover`);

      for (const transaction of failedTransactions) {
        try {
          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          if (transaction.order_id) {
            await this.processOrderPayment(transaction.order_id);
          }
        } catch (error) {
          console.error(`‚ùå Failed to recover transaction ${transaction.transaction_id}:`, error);
        }
      }

    } catch (error) {
      console.error('‚ùå Error in recovery process:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–æ–≥–∞–º
  async getTransactionStats(): Promise<any> {
    const stats = await db.select()
      .from(referralTransactionLog);

    const summary = {
      total: stats.length,
      completed: stats.filter(t => t.status === 'completed').length,
      failed: stats.filter(t => t.status === 'failed').length,
      notification_failed: stats.filter(t => t.status === 'notification_failed').length,
      pending: stats.filter(t => t.status === 'pending' || t.status === 'processing').length,
    };

    return {
      summary,
      recent_transactions: stats.slice(-10)
    };
  }
}

export const referralTransactionService = new ReferralTransactionService();