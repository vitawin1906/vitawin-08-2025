import { storage } from '../storage';
import { telegramNotificationService } from './telegramNotificationService';

// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export class PaymentProcessor {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
  async processPaymentConfirmation(orderId: number): Promise<void> {
    try {
      console.log(`üîÑ Processing payment confirmation for order ${orderId}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = await storage.getOrder(orderId);
      if (!order) {
        throw new Error(`Order ${orderId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–ª–∞—á–µ–Ω
      if (order.payment_status !== 'paid') {
        console.log(`‚ö†Ô∏è Order ${orderId} is not paid, skipping bonus processing`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const buyer = await storage.getUser(order.user_id);
      if (!buyer || !buyer.referrer_id) {
        console.log(`‚ÑπÔ∏è Order ${orderId} has no referrer, skipping bonus processing`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      const referralSettings = await storage.getReferralSettings();
      if (!referralSettings) {
        console.log(`‚ö†Ô∏è Referral settings not configured, using defaults`);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await this.processReferralBonuses(orderId, order, buyer, {
          level1_commission: '20.00',
          level2_commission: '5.00',
          level3_commission: '1.00'
        });
      } else {
        await this.processReferralBonuses(orderId, order, buyer, referralSettings);
      }

      console.log(`‚úÖ Payment processing completed for order ${orderId}`);

    } catch (error) {
      console.error(`‚ùå Error processing payment for order ${orderId}:`, error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      await this.logError(orderId, error instanceof Error ? error.message : 'Unknown error');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  private async processReferralBonuses(orderId: number, order: any, buyer: any, settings: any): Promise<void> {
    const orderTotal = parseFloat(order.total);
    const commissionRates = [
      { level: 1, rate: parseFloat(settings.level1_commission) / 100 },
      { level: 2, rate: parseFloat(settings.level2_commission) / 100 },
      { level: 3, rate: parseFloat(settings.level3_commission) / 100 },
    ];

    let currentReferrerId = buyer.referrer_id;

    for (const { level, rate } of commissionRates) {
      if (!currentReferrerId) break;

      const referrer = await storage.getUser(currentReferrerId);
      if (!referrer) break;

      const bonusAmount = orderTotal * rate;

      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
        await storage.createReferral({
          user_id: buyer.id,
          referrer_id: currentReferrerId,
          order_id: orderId,
          referral_level: level,
          commission_rate: (rate * 100).toFixed(2),
          reward_earned: bonusAmount.toFixed(2),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await telegramNotificationService.sendBonusNotification(
          currentReferrerId,
          bonusAmount,
          buyer.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          level
        );

        console.log(`üí∞ Bonus ${bonusAmount.toFixed(2)}‚ÇΩ processed and notified for ${referrer.first_name} (Level ${level})`);

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await this.logTransaction(orderId, currentReferrerId, level, bonusAmount, 'completed');

      } catch (error) {
        console.error(`‚ùå Failed to process bonus for ${referrer.first_name}:`, error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await this.logTransaction(orderId, currentReferrerId, level, bonusAmount, 'failed', error instanceof Error ? error.message : 'Unknown error');
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
      currentReferrerId = referrer.referrer_id;
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  private async logTransaction(orderId: number, referrerId: number, level: number, amount: number, status: string, error?: string): Promise<void> {
    const logEntry = {
      timestamp: new Date().toISOString(),
      order_id: orderId,
      referrer_id: referrerId,
      level: level,
      amount: amount.toFixed(2),
      status: status,
      error: error || null
    };

    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù Transaction Log:', JSON.stringify(logEntry));
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  private async logError(orderId: number, error: string): Promise<void> {
    const errorLog = {
      timestamp: new Date().toISOString(),
      order_id: orderId,
      error: error,
      type: 'payment_processing_error'
    };

    console.log('üö® Error Log:', JSON.stringify(errorLog));
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  async retryFailedOrder(orderId: number): Promise<void> {
    console.log(`üîÑ Retrying failed transactions for order ${orderId}...`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      const order = await storage.getOrder(orderId);
      if (order && order.payment_status === 'paid') {
        await this.processPaymentConfirmation(orderId);
      } else {
        console.log(`‚ö†Ô∏è Order ${orderId} is not paid, cannot retry`);
      }
    } catch (error) {
      console.error(`‚ùå Failed to retry order ${orderId}:`, error);
    }
  }
}

export const paymentProcessor = new PaymentProcessor();