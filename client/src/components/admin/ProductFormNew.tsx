
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Upload, X, Star, ImagePlus, ToggleLeft, ToggleRight, Loader2, FileText } from 'lucide-react';
import { useCreateProduct, useUpdateProduct, useUploadProductImage, Product } from '@/hooks/useProducts';
import { useToast } from '@/hooks/use-toast';
import { ImageUploader } from './ImageUploader';
// –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç utils –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker —Å–±–æ—Ä–∫–∏
// import { performFullImageCacheRefresh, refreshProductImages } from '@/utils/imageCacheUtils';


// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const CATEGORIES = [
  '–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞',
  '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞', 
  '–§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
  '–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
  '–ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è',
  '–°–æ–Ω –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
];

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–µ–π–¥–∂–∏
const BADGES = [
  '–ë–µ—Å—Ç—Å–µ–ª–ª–µ—Ä',
  '–ù–æ–≤–∏–Ω–∫–∞',
  '–ü—Ä–µ–º–∏—É–º',
  '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π',
  '–í—ã–≥–æ–¥–Ω–æ',
  '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤—Ä–∞—á–∞–º–∏',
  '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è',
  '–≠–∫–æ-–ø—Ä–æ–¥—É–∫—Ç'
];

interface ProductFormNewProps {
  product?: Product | null;
  onSuccess: () => void;
  onCancel: () => void;
}

export function ProductFormNew({ product, onSuccess, onCancel }: ProductFormNewProps) {
  const [images, setImages] = useState<string[]>([]);
  const [mainImageIndex, setMainImageIndex] = useState<number>(0);
  const [benefits, setBenefits] = useState<string[]>(product?.benefits || []);
  const [currentBenefit, setCurrentBenefit] = useState('');
  const [compositionRows, setCompositionRows] = useState<{component: string, amount: string}[]>(
    (product as any)?.composition_table && Array.isArray((product as any).composition_table) 
      ? (product as any).composition_table 
      : [{ component: '', amount: '' }]
  );
  const [uploadingImages, setUploadingImages] = useState<boolean>(false);
  const [isActive, setIsActive] = useState<boolean>(product?.status === 'active' || !product);
  const [selectedCategory, setSelectedCategory] = useState<string>(product?.category || '');
  const [selectedBadge, setSelectedBadge] = useState<string>(product?.badge || '');
  const [isGeneratingArticle, setIsGeneratingArticle] = useState<boolean>(false);

  const createProductMutation = useCreateProduct();
  const updateProductMutation = useUpdateProduct();
  const uploadImageMutation = useUploadProductImage();
  const { toast } = useToast();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
  useEffect(() => {
    if (product?.images) {
      setImages(product.images);
    }
  }, [product]);

  const { register, handleSubmit, formState: { errors }, setValue, watch } = useForm({
    defaultValues: {
      name: product?.name || '',
      description: product?.description || '',
      long_description: product?.long_description || '',
      price: product?.price || 0,
      original_price: product?.original_price || 0,
      category: product?.category || '',
      badge: product?.badge || '',
      stock: product?.stock || 0,
      status: (product?.status || 'active') as 'active' | 'inactive',
      sku: product?.sku || '',
      slug: (product as any)?.slug || '',
      capsule_count: product?.capsule_count || 0,
      capsule_volume: product?.capsule_volume || '',
      servings_per_container: product?.servings_per_container || 0,
      manufacturer: product?.manufacturer || '',
      country_of_origin: product?.country_of_origin || '',
      expiration_date: product?.expiration_date || '',
      storage_conditions: product?.storage_conditions || '',
      how_to_take: (product?.how_to_take || 'morning') as 'morning' | 'morning_evening' | 'with_meals' | 'before_meals' | 'custom',
      usage: product?.usage || '',
      additional_info: product?.additional_info || '',
      custom_pv: (product as any)?.custom_pv || '',
      custom_cashback: (product as any)?.custom_cashback || '',
    }
  });

  const toggleActiveStatus = async () => {
    if (!product?.id) return;
    
    const newStatus = isActive ? 'inactive' : 'active' as 'active' | 'inactive';

    try {
      await updateProductMutation.mutateAsync({ 
        id: product.id.toString(), 
        status: newStatus
      });
      
      setIsActive(!isActive);
      (setValue as any)('status', newStatus);
      
      toast({
        title: isActive ? "–¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        description: `–¢–æ–≤–∞—Ä ${isActive ? '—Å–∫—Ä—ã—Ç' : '–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è'} –Ω–∞ —Å–∞–π—Ç–µ`,
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞",
        variant: "destructive",
      });
    }
  };

  const onSubmit = async (data: any) => {
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ
    data.status = isActive ? 'active' : 'inactive';
    
    // –î–æ–±–∞–≤–ª—è–µ–º title –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
    data.title = data.name;
    
    // –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
    const orderedImages = [...(images || [])];
    if (mainImageIndex > 0 && orderedImages.length > 0) {
      const mainImage = orderedImages[mainImageIndex];
      orderedImages.splice(mainImageIndex, 1);
      orderedImages.unshift(mainImage);
    }

    const productData = {
      ...data,
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è API
      price: data.price.toString(),
      original_price: data.original_price ? data.original_price.toString() : null,
      stock: parseInt(data.stock) || 0,
      capsule_count: parseInt(data.capsule_count) || 0,
      servings_per_container: parseInt(data.servings_per_container) || 0,
      images: orderedImages.length > 0 ? orderedImages : [],
      benefits,
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
      key_benefits: data.key_benefits || null,
      quality_guarantee: data.quality_guarantee || null,
      nutrition_facts: data.nutrition_facts || null,
      composition_table: compositionRows.filter(row => row.component.trim() || row.amount.trim()),
      rating: product?.rating || 0,
      reviews: product?.reviews || 0,
      custom_pv: data.custom_pv ? parseInt(data.custom_pv) : null,
      custom_cashback: data.custom_cashback ? parseFloat(data.custom_cashback) : null,
    };

    try {
      if (product?.id) {
        const updateResult = await updateProductMutation.mutateAsync({ id: product.id, ...productData });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if (updateResult?.imageRefreshRequired || updateResult?.cacheCleared) {
          console.log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...');
          
          // –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —É—Ç–∏–ª–∏—Ç
          setTimeout(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–±–∞–≤–ª—è—è timestamp
            const images = document.querySelectorAll('img[src*="/uploads/"], img[src*="/api/uploads/"]');
            const timestamp = Date.now();
            
            images.forEach((img: any, index: number) => {
              const currentSrc = img.src;
              if (currentSrc && !currentSrc.includes('?t=')) {
                const separator = currentSrc.includes('?') ? '&' : '?';
                img.src = `${currentSrc}${separator}t=${timestamp + index}`;
              }
            });
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –≤ localStorage/sessionStorage
            try {
              for (let i = localStorage.length - 1; i >= 0; i--) {
                const key = localStorage.key(i);
                if (key && (key.includes('image') || key.includes('product') || key.includes('upload'))) {
                  localStorage.removeItem(key);
                }
              }
            } catch (e) {}
            
          }, 500);
          
          toast({
            title: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω",
            description: "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.",
          });
        }
      } else {
        const result = await createProductMutation.mutateAsync(productData);
      }
      onSuccess();
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        variant: "destructive",
      });
    }
  };

  const handleMultipleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setUploadingImages(true);
    
    try {
      const uploadPromises = Array.from(files).map(file => 
        uploadImageMutation.mutateAsync({ file, productId: product?.id })
      );

      const results = await Promise.all(uploadPromises);
      const newImageUrls = results.map(result => result.url);
      
      setImages(prev => [...prev, ...newImageUrls]);
      
      toast({
        title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        description: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        variant: "destructive",
      });
    } finally {
      setUploadingImages(false);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      event.target.value = '';
    }
  };

  const removeImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index);
    setImages(newImages);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (mainImageIndex === index) {
      setMainImageIndex(0);
    } else if (mainImageIndex > index) {
      setMainImageIndex(mainImageIndex - 1);
    }
  };

  const setMainImage = (index: number) => {
    setMainImageIndex(index);
  };

  const addBenefit = () => {
    if (currentBenefit.trim()) {
      setBenefits(prev => [...prev, currentBenefit.trim()]);
      setCurrentBenefit('');
    }
  };

  const removeBenefit = (index: number) => {
    setBenefits(prev => prev.filter((_, i) => i !== index));
  };

  const addCompositionRow = () => {
    setCompositionRows(prev => [...prev, { component: '', amount: '' }]);
  };

  const removeCompositionRow = (index: number) => {
    setCompositionRows(prev => prev.filter((_, i) => i !== index));
  };

  const updateCompositionRow = (index: number, field: 'component' | 'amount', value: string) => {
    setCompositionRows(prev => prev.map((row, i) => 
      i === index ? { ...row, [field]: value } : row
    ));
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ * <span className="text-xs text-blue-600">(Title –¥–ª—è SEO)</span></Label>
            </div>
            <Input
              id="name"
              {...register('name', { required: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' })}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            />
            <div className="text-xs text-gray-500 mt-1">
              üéØ SEO: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤ –º–µ—Ç–∞-—Ç–µ–≥–µ title
            </div>
            {errors.name && <p className="text-red-500 text-sm">{errors.name.message}</p>}
          </div>

          <div>
            <div className="flex items-center gap-2 mb-2">
              <Label htmlFor="description">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ <span className="text-xs text-blue-600">(Meta Description)</span></Label>
            </div>
            <Textarea
              id="description"
              {...register('description')}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            />
            <div className="text-xs text-gray-500 mt-1">
              üéØ SEO: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            </div>
          </div>

          <div>
            <Label htmlFor="slug">URL –∞–¥—Ä–µ—Å —Ç–æ–≤–∞—Ä–∞ * <span className="text-xs text-blue-600">(SEO URL)</span></Label>
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-500">https://vitawin.ru/product/</span>
              <Input
                id="slug"
                {...register('slug', { 
                  required: 'URL –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                  validate: (value) => {
                    if (!value) return 'URL –∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
                    if (/^\d+$/.test(value)) return 'URL –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä';
                    if (!/^[a-z0-9-]+$/.test(value)) return 'URL –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã';
                    return true;
                  }
                })}
                placeholder="berberinplus-120caps"
                className="flex-1"
                onChange={(e) => {
                  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ URL
                  const value = e.target.value;
                  setValue('slug', value);
                }}
              />
            </div>
            <div className="text-xs text-gray-500 mt-1">
              üéØ SEO: –ß–ü–£ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
            </div>
            {errors.slug && <p className="text-red-500 text-sm">{String(errors.slug.message)}</p>}
            {watch('slug') && !errors.slug && (
              <div className="text-xs text-emerald-600 mt-1">
                –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://vitawin.ru/product/{watch('slug')}
              </div>
            )}
          </div>

          <div>
            <div className="flex items-center gap-2 mb-2">
              <Label htmlFor="long_description">–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ <span className="text-xs text-blue-600">(–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è SEO)</span></Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={async () => {
                  if (!watch('name')) {
                    toast({
                      title: "–û—à–∏–±–∫–∞",
                      description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                      variant: "destructive"
                    });
                    return;
                  }
                  
                  setIsGeneratingArticle(true);
                  try {
                    const response = await fetch('/api/ai/generate-full-article', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        title: watch('name'),
                        description: watch('description'),
                        category: watch('category')
                      })
                    });
                    
                    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
                    
                    const data = await response.json();
                    setValue('long_description', data.article);
                    
                    toast({
                      title: "–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞! ‚ú®",
                      description: `–ù–∞—É—á–Ω–∞—è —Å—Ç–∞—Ç—å—è ${data.character_count} —Å–∏–º–≤–æ–ª–æ–≤ –≥–æ—Ç–æ–≤–∞`,
                    });
                  } catch (error) {
                    toast({
                      title: "–û—à–∏–±–∫–∞",
                      description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é",
                      variant: "destructive"
                    });
                  } finally {
                    setIsGeneratingArticle(false);
                  }
                }}
                disabled={isGeneratingArticle || !watch('name')}
                className="shrink-0"
              >
                {isGeneratingArticle ? (
                  <>
                    <Loader2 className="w-3 h-3 mr-1 animate-spin" />
                    –°–æ–∑–¥–∞—é...
                  </>
                ) : (
                  <>
                    <FileText className="w-3 h-3 mr-1" />
                    –°—Ç–∞—Ç—å—è –ò–ò
                  </>
                )}
              </Button>
            </div>
            <div className="space-y-2">
              {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
              <div className="flex flex-wrap gap-2 p-2 bg-gray-50 rounded-lg border">
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n# –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1\n');
                  }}
                >
                  H1
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n## –ó–∞–≥–æ–ª–æ–≤–æ–∫ H2\n');
                  }}
                >
                  H2
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n### –ó–∞–≥–æ–ª–æ–≤–æ–∫ H3\n');
                  }}
                >
                  H3
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n#### –ó–∞–≥–æ–ª–æ–≤–æ–∫ H4\n');
                  }}
                >
                  H4
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n##### –ó–∞–≥–æ–ª–æ–≤–æ–∫ H5\n');
                  }}
                >
                  H5
                </button>
                <div className="border-l mx-2"></div>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞\n');
                  }}
                >
                  ‚Ä¢ –°–ø–∏—Å–æ–∫
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n');
                  }}
                >
                  B
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const currentText = watch('long_description') || '';
                    setValue('long_description', currentText + '\n*–ö—É—Ä—Å–∏–≤*\n');
                  }}
                >
                  I
                </button>
                <button
                  type="button"
                  className="px-3 py-1 text-sm bg-white border rounded hover:bg-gray-100"
                  onClick={() => {
                    const text = prompt("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏:");
                    const url = prompt("–í–≤–µ–¥–∏—Ç–µ URL:");
                    if (text && url) {
                      const currentText = watch('long_description') || '';
                      setValue('long_description', currentText + `\n[${text}](${url})\n`);
                    }
                  }}
                >
                  üîó
                </button>
              </div>
              <Textarea
                id="long_description"
                {...register('long_description')}
                placeholder="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown: 
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ H2
### –ó–∞–≥–æ–ª–æ–≤–æ–∫ H3
**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
*–ö—É—Ä—Å–∏–≤*
- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞"
                rows={8}
                className="font-mono text-sm"
              />
              <div className="text-xs text-gray-500">
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –∏–ª–∏ Markdown —Ä–∞–∑–º–µ—Ç–∫—É: # H1, ## H2, ### H3, **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, - —Å–ø–∏—Å–∫–∏
              </div>
              <div className="text-xs text-blue-600 mt-1">
                üéØ SEO: –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—å—é —Å –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–æ–π Schema.org –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="price">–¶–µ–Ω–∞ *</Label>
              <Input
                id="price"
                type="number"
                step="0.01"
                {...register('price', { required: '–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞', min: 0 })}
                placeholder="0.00"
              />
              {errors.price && <p className="text-red-500 text-sm">{errors.price.message}</p>}
            </div>

            <div>
              <Label htmlFor="original_price">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</Label>
              <Input
                id="original_price"
                type="number"
                step="0.01"
                {...register('original_price', { min: 0 })}
                placeholder="0.00"
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</Label>
              <Select 
                value={selectedCategory} 
                onValueChange={(value) => {
                  setSelectedCategory(value);
                  setValue('category', value);
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {CATEGORIES.map((category) => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.category && <p className="text-red-500 text-sm">{errors.category.message}</p>}
            </div>

            <div>
              <Label htmlFor="badge">–ë–µ–π–¥–∂</Label>
              <Select 
                value={selectedBadge} 
                onValueChange={(value) => {
                  setSelectedBadge(value);
                  setValue('badge', value);
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–π–¥–∂" />
                </SelectTrigger>
                <SelectContent>
                  {BADGES.map((badge) => (
                    <SelectItem key={badge} value={badge}>
                      {badge}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <Label htmlFor="stock">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ *</Label>
              <Input
                id="stock"
                type="number"
                {...register('stock', { required: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', min: 0 })}
                placeholder="0"
              />
              {errors.stock && <p className="text-red-500 text-sm">{errors.stock.message}</p>}
            </div>

            <div>
              <Label htmlFor="status">–°—Ç–∞—Ç—É—Å</Label>
              <Select onValueChange={(value: 'active' | 'inactive') => setValue('status', value)} defaultValue={watch('status')}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</SelectItem>
                  <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="sku">SKU</Label>
              <Input
                id="sku"
                {...register('sku')}
                placeholder="PROD-001"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <ImageUploader 
            images={images} 
            onImagesChange={setImages} 
          />
        </CardContent>
      </Card>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-3 gap-4">
            <div>
              <Label htmlFor="capsule_count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª</Label>
              <Input
                id="capsule_count"
                type="number"
                {...register('capsule_count', { min: 0 })}
                placeholder="60"
              />
            </div>

            <div>
              <Label htmlFor="capsule_volume">–û–±—ä–µ–º –∫–∞–ø—Å—É–ª—ã</Label>
              <Input
                id="capsule_volume"
                {...register('capsule_volume')}
                placeholder="500mg"
              />
            </div>

            <div>
              <Label htmlFor="servings_per_container">–ü–æ—Ä—Ü–∏–π –≤ —É–ø–∞–∫–æ–≤–∫–µ</Label>
              <Input
                id="servings_per_container"
                type="number"
                {...register('servings_per_container', { min: 0 })}
                placeholder="30"
              />
            </div>
          </div>

          <div>
            <Label htmlFor="key_benefits">–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</Label>
            <Textarea
              id="key_benefits"
              {...(register as any)('key_benefits')}
              placeholder="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏
–°–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∑–¥–æ—Ä–æ–≤–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Å–∞
–ü–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ"
              rows={4}
            />
            <div className="text-xs text-gray-500 mt-1">
              üí° –ö–∞–∂–¥–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–∏—à–∏—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            </div>
          </div>

          <div>
            <Label htmlFor="quality_guarantee">–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞</Label>
            <Textarea
              id="quality_guarantee"
              {...(register as any)('quality_guarantee')}
              placeholder="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –Ω–∞ —á–∏—Å—Ç–æ—Ç—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
–≠–∫—Å—Ç—Ä–∞–∫—Ç –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ 97% –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
–ë–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª–µ–π"
              rows={4}
            />
            <div className="text-xs text-gray-500 mt-1">
              üí° –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–∏—à–∏—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            </div>
          </div>

          <div>
            <Label htmlFor="composition">–°–æ—Å—Ç–∞–≤</Label>
            <Input
              id="composition"
              {...(register as any)('composition')}
              placeholder="–í–∏—Ç–∞–º–∏–Ω D3, –∂–µ–ª–∞—Ç–∏–Ω, –≥–ª–∏—Ü–µ—Ä–∏–Ω"
            />
          </div>

          <div>
            <Label>–°–æ—Å—Ç–∞–≤ –∏ –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (—Ç–∞–±–ª–∏—Ü–∞)</Label>
            <div className="space-y-2">
              {compositionRows.map((row, index) => (
                <div key={index} className="grid grid-cols-2 gap-2">
                  <Input
                    placeholder="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í–∏—Ç–∞–º–∏–Ω D3)"
                    value={row.component}
                    onChange={(e) => updateCompositionRow(index, 'component', e.target.value)}
                  />
                  <div className="flex gap-2">
                    <Input
                      placeholder="–î–æ–∑–∏—Ä–æ–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –ú–ï)"
                      value={row.amount}
                      onChange={(e) => updateCompositionRow(index, 'amount', e.target.value)}
                    />
                    {compositionRows.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeCompositionRow(index)}
                      >
                        ‚úï
                      </Button>
                    )}
                  </div>
                </div>
              ))}
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={addCompositionRow}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
              </Button>
            </div>
            <div className="text-xs text-gray-500 mt-1">
              üí° –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            </div>
          </div>

          <div>
            <Label htmlFor="nutrition_facts">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–∞–≤–µ</Label>
            <Textarea
              id="nutrition_facts"
              {...(register as any)('nutrition_facts')}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ñ–µ–ª–∞—Ç–∏–Ω (–∫–∞–ø—Å—É–ª–∞), –≥–ª–∏—Ü–µ—Ä–∏–Ω, –æ—á–∏—â–µ–Ω–Ω–∞—è –≤–æ–¥–∞."
              rows={3}
            />
            <div className="text-xs text-gray-500 mt-1">
              üí° –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="manufacturer">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å</Label>
              <Input
                id="manufacturer"
                {...register('manufacturer')}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"
              />
            </div>

            <div>
              <Label htmlFor="country_of_origin">–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</Label>
              <Input
                id="country_of_origin"
                {...register('country_of_origin')}
                placeholder="–°–®–ê"
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="expiration_date">–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</Label>
              <Input
                id="expiration_date"
                {...register('expiration_date')}
                placeholder="2 –≥–æ–¥–∞"
              />
            </div>

            <div>
              <Label htmlFor="how_to_take">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞</Label>
              <Select onValueChange={(value) => (setValue as any)('how_to_take', value)} defaultValue={watch('how_to_take')}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="morning">–£—Ç—Ä–æ–º</SelectItem>
                  <SelectItem value="morning_evening">–£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º</SelectItem>
                  <SelectItem value="with_meals">–° –µ–¥–æ–π</SelectItem>
                  <SelectItem value="before_meals">–î–æ –µ–¥—ã</SelectItem>
                  <SelectItem value="custom">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ</SelectItem>
                </SelectContent>
              </Select>
              <div className="text-xs text-gray-500 mt-1">
                üí° –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
              </div>
            </div>
          </div>

          <div>
            <Label htmlFor="storage_conditions">–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è</Label>
            <Input
              id="storage_conditions"
              {...register('storage_conditions')}
              placeholder="–•—Ä–∞–Ω–∏—Ç—å –≤ —Å—É—Ö–æ–º –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º –º–µ—Å—Ç–µ"
            />
          </div>

          <div>
            <Label htmlFor="usage">–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</Label>
            <Textarea
              id="usage"
              {...register('usage')}
              placeholder="–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ 1 –∫–∞–ø—Å—É–ª–µ –≤ –¥–µ–Ω—å"
            />
          </div>

          <div>
            <Label htmlFor="benefits_text">–ü–æ–ª—å–∑–∞</Label>
            <Textarea
              id="benefits_text"
              {...(register as any)('benefits_text')}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
            />
          </div>

          <div>
            <Label htmlFor="additional_info">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
            <Textarea
              id="additional_info"
              {...register('additional_info')}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ"
            />
          </div>
        </CardContent>
      </Card>

      {/* PV –∏ –ö–µ—à–±—ç–∫ */}
      <Card>
        <CardHeader>
          <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PV –∏ –ö–µ—à–±—ç–∫–∞</CardTitle>
          <p className="text-sm text-gray-600">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PV –∏ –∫–µ—à–±—ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç.
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="custom_pv">–†—É—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PV</Label>
              <Input
                id="custom_pv"
                type="number"
                {...register('custom_pv', { min: 0 })}
                placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 1 PV –∑–∞ 200‚ÇΩ"
              />
              <div className="text-xs text-gray-500 mt-1">
                –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (1 PV –∑–∞ –∫–∞–∂–¥—ã–µ 200‚ÇΩ)
              </div>
            </div>

            <div>
              <Label htmlFor="custom_cashback">–†—É—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–µ—à–±—ç–∫–∞ (‚ÇΩ)</Label>
              <Input
                id="custom_cashback"
                type="number"
                step="0.01"
                {...register('custom_cashback', { min: 0 })}
                placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 5% –æ—Ç —Ü–µ–Ω—ã"
              />
              <div className="text-xs text-gray-500 mt-1">
                –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (5% –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞)
              </div>
            </div>
          </div>
          
          <div className="bg-blue-50 p-3 rounded-lg">
            <p className="text-sm text-blue-800 font-medium">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</p>
            <div className="text-sm text-blue-700 mt-1">
              –ü—Ä–∏ —Ü–µ–Ω–µ {watch('price') || 0}‚ÇΩ:
              <br />‚Ä¢ PV: {watch('custom_pv') || Math.floor((watch('price') || 0) / 200)} PV
              <br />‚Ä¢ –ö–µ—à–±—ç–∫: {watch('custom_cashback') || Math.ceil((watch('price') || 0) * 0.05)}‚ÇΩ
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ü–æ–ª—å–∑–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–ª—å–∑–∞ —Ç–æ–≤–∞—Ä–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex gap-2">
              <Input
                value={currentBenefit}
                onChange={(e) => setCurrentBenefit(e.target.value)}
                placeholder="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑—É"
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addBenefit())}
              />
              <Button type="button" onClick={addBenefit}>
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </div>

            {benefits.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {benefits.map((benefit, index) => (
                  <Badge key={index} variant="secondary" className="flex items-center gap-1">
                    {benefit}
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0"
                      onClick={() => removeBenefit(index)}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-2">
          {product?.id && (
            <Button
              type="button"
              variant={isActive ? "default" : "secondary"}
              onClick={toggleActiveStatus}
              disabled={updateProductMutation.isPending}
              className={`${isActive ? 'bg-emerald-600 hover:bg-emerald-700' : 'bg-gray-500 hover:bg-gray-600'} text-white`}
            >
              {isActive ? (
                <>
                  <ToggleRight className="w-4 h-4 mr-2" />
                  –ê–∫—Ç–∏–≤–µ–Ω
                </>
              ) : (
                <>
                  <ToggleLeft className="w-4 h-4 mr-2" />
                  –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
                </>
              )}
            </Button>
          )}
        </div>

        
        <div className="flex space-x-2">
          <Button type="button" variant="outline" onClick={onCancel}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            type="submit" 
            disabled={createProductMutation.isPending || updateProductMutation.isPending}
          >
            {product?.id ? '–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' : '–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä'}
          </Button>
        </div>
      </div>
    </form>
  );
}
